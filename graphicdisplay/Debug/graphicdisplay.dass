
./Debug/graphicdisplay.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:


__attribute__((naked))
__attribute__((section(".start_section")))
void startup(void){
	__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fbbe 	bl	20000784 <main>
20000008:	e7fe      	b.n	20000008 <startup+0x8>
	" LDR R0,=0x2001C000\n"
	" MOV SP, R0\n"
	" BL main\n"
	" B . \n"
	);
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:


//Delay funktioner
void delay_250ns(void){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*stk_val = 0x00000000;
	*stk_ctrl = 0x00000101;
	while(((*stk_ctrl) & 0x00010000) == 0);
	*stk_ctrl = 0x00000000;
	*/
}
20000014:	46c0      	nop			; (mov r8, r8)
20000016:	46bd      	mov	sp, r7
20000018:	bd80      	pop	{r7, pc}

2000001a <delay_500ns>:

void delay_500ns(void){
2000001a:	b580      	push	{r7, lr}
2000001c:	af00      	add	r7, sp, #0
	delay_250ns();
2000001e:	f7ff fff7 	bl	20000010 <delay_250ns>
	delay_250ns();
20000022:	f7ff fff5 	bl	20000010 <delay_250ns>
}
20000026:	46c0      	nop			; (mov r8, r8)
20000028:	46bd      	mov	sp, r7
2000002a:	bd80      	pop	{r7, pc}

2000002c <delay_mikro>:



void delay_mikro(unsigned int us){
2000002c:	b580      	push	{r7, lr}
2000002e:	b084      	sub	sp, #16
20000030:	af00      	add	r7, sp, #0
20000032:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < us; i++){
20000034:	2300      	movs	r3, #0
20000036:	60fb      	str	r3, [r7, #12]
20000038:	e00d      	b.n	20000056 <delay_mikro+0x2a>
		for(int w = 0; w < 4; w++){
2000003a:	2300      	movs	r3, #0
2000003c:	60bb      	str	r3, [r7, #8]
2000003e:	e004      	b.n	2000004a <delay_mikro+0x1e>
			delay_250ns();
20000040:	f7ff ffe6 	bl	20000010 <delay_250ns>
		for(int w = 0; w < 4; w++){
20000044:	68bb      	ldr	r3, [r7, #8]
20000046:	3301      	adds	r3, #1
20000048:	60bb      	str	r3, [r7, #8]
2000004a:	68bb      	ldr	r3, [r7, #8]
2000004c:	2b03      	cmp	r3, #3
2000004e:	ddf7      	ble.n	20000040 <delay_mikro+0x14>
	for(int i = 0; i < us; i++){
20000050:	68fb      	ldr	r3, [r7, #12]
20000052:	3301      	adds	r3, #1
20000054:	60fb      	str	r3, [r7, #12]
20000056:	68fb      	ldr	r3, [r7, #12]
20000058:	687a      	ldr	r2, [r7, #4]
2000005a:	429a      	cmp	r2, r3
2000005c:	d8ed      	bhi.n	2000003a <delay_mikro+0xe>
		}
	}
}
2000005e:	46c0      	nop			; (mov r8, r8)
20000060:	46bd      	mov	sp, r7
20000062:	b004      	add	sp, #16
20000064:	bd80      	pop	{r7, pc}

20000066 <delay_milli>:

void delay_milli(unsigned int ms){
20000066:	b580      	push	{r7, lr}
20000068:	b084      	sub	sp, #16
2000006a:	af00      	add	r7, sp, #0
2000006c:	6078      	str	r0, [r7, #4]
	unsigned int us = ms * 1000;
2000006e:	687a      	ldr	r2, [r7, #4]
20000070:	0013      	movs	r3, r2
20000072:	015b      	lsls	r3, r3, #5
20000074:	1a9b      	subs	r3, r3, r2
20000076:	009b      	lsls	r3, r3, #2
20000078:	189b      	adds	r3, r3, r2
2000007a:	00db      	lsls	r3, r3, #3
2000007c:	60fb      	str	r3, [r7, #12]
	delay_mikro(us);
2000007e:	68fb      	ldr	r3, [r7, #12]
20000080:	0018      	movs	r0, r3
20000082:	f7ff ffd3 	bl	2000002c <delay_mikro>
}
20000086:	46c0      	nop			; (mov r8, r8)
20000088:	46bd      	mov	sp, r7
2000008a:	b004      	add	sp, #16
2000008c:	bd80      	pop	{r7, pc}

2000008e <graphic_ctrl_bit_set>:




//Välj grafisk display och ettställ de bitar som är 1 i x
void graphic_ctrl_bit_set(uint8_t x){
2000008e:	b580      	push	{r7, lr}
20000090:	b082      	sub	sp, #8
20000092:	af00      	add	r7, sp, #0
20000094:	0002      	movs	r2, r0
20000096:	1dfb      	adds	r3, r7, #7
20000098:	701a      	strb	r2, [r3, #0]
	*portOdrLowE |= x & ~B_SELECT;
2000009a:	4b09      	ldr	r3, [pc, #36]	; (200000c0 <graphic_ctrl_bit_set+0x32>)
2000009c:	781b      	ldrb	r3, [r3, #0]
2000009e:	b2db      	uxtb	r3, r3
200000a0:	b25a      	sxtb	r2, r3
200000a2:	1dfb      	adds	r3, r7, #7
200000a4:	781b      	ldrb	r3, [r3, #0]
200000a6:	b25b      	sxtb	r3, r3
200000a8:	2104      	movs	r1, #4
200000aa:	438b      	bics	r3, r1
200000ac:	b25b      	sxtb	r3, r3
200000ae:	4313      	orrs	r3, r2
200000b0:	b25a      	sxtb	r2, r3
200000b2:	4b03      	ldr	r3, [pc, #12]	; (200000c0 <graphic_ctrl_bit_set+0x32>)
200000b4:	b2d2      	uxtb	r2, r2
200000b6:	701a      	strb	r2, [r3, #0]
}
200000b8:	46c0      	nop			; (mov r8, r8)
200000ba:	46bd      	mov	sp, r7
200000bc:	b002      	add	sp, #8
200000be:	bd80      	pop	{r7, pc}
200000c0:	40021014 	andmi	r1, r2, r4, lsl r0

200000c4 <graphic_ctrl_bit_clear>:


//Välj grafisk display och nollställ de bitar som är 1 i x
void graphic_ctrl_bit_clear(uint8_t x){
200000c4:	b580      	push	{r7, lr}
200000c6:	b082      	sub	sp, #8
200000c8:	af00      	add	r7, sp, #0
200000ca:	0002      	movs	r2, r0
200000cc:	1dfb      	adds	r3, r7, #7
200000ce:	701a      	strb	r2, [r3, #0]
	*portOdrLowE &= (~x & ~B_SELECT);
200000d0:	4b08      	ldr	r3, [pc, #32]	; (200000f4 <graphic_ctrl_bit_clear+0x30>)
200000d2:	781b      	ldrb	r3, [r3, #0]
200000d4:	b2db      	uxtb	r3, r3
200000d6:	1dfa      	adds	r2, r7, #7
200000d8:	7812      	ldrb	r2, [r2, #0]
200000da:	43d2      	mvns	r2, r2
200000dc:	b2d2      	uxtb	r2, r2
200000de:	4013      	ands	r3, r2
200000e0:	b2db      	uxtb	r3, r3
200000e2:	4a04      	ldr	r2, [pc, #16]	; (200000f4 <graphic_ctrl_bit_clear+0x30>)
200000e4:	2104      	movs	r1, #4
200000e6:	438b      	bics	r3, r1
200000e8:	b2db      	uxtb	r3, r3
200000ea:	7013      	strb	r3, [r2, #0]
}
200000ec:	46c0      	nop			; (mov r8, r8)
200000ee:	46bd      	mov	sp, r7
200000f0:	b002      	add	sp, #8
200000f2:	bd80      	pop	{r7, pc}
200000f4:	40021014 	andmi	r1, r2, r4, lsl r0

200000f8 <select_controller>:


//Konfigurera CS-signalerna
void select_controller(uint8_t controller){
200000f8:	b580      	push	{r7, lr}
200000fa:	b082      	sub	sp, #8
200000fc:	af00      	add	r7, sp, #0
200000fe:	0002      	movs	r2, r0
20000100:	1dfb      	adds	r3, r7, #7
20000102:	701a      	strb	r2, [r3, #0]
	switch(controller){
20000104:	1dfb      	adds	r3, r7, #7
20000106:	781b      	ldrb	r3, [r3, #0]
20000108:	2b08      	cmp	r3, #8
2000010a:	d00c      	beq.n	20000126 <select_controller+0x2e>
2000010c:	dc02      	bgt.n	20000114 <select_controller+0x1c>
2000010e:	2b00      	cmp	r3, #0
20000110:	d005      	beq.n	2000011e <select_controller+0x26>
20000112:	e019      	b.n	20000148 <select_controller+0x50>
20000114:	2b10      	cmp	r3, #16
20000116:	d00d      	beq.n	20000134 <select_controller+0x3c>
20000118:	2b18      	cmp	r3, #24
2000011a:	d012      	beq.n	20000142 <select_controller+0x4a>
2000011c:	e014      	b.n	20000148 <select_controller+0x50>
		case 0:
			graphic_ctrl_bit_clear(B_CS1 | B_CS2);
2000011e:	2018      	movs	r0, #24
20000120:	f7ff ffd0 	bl	200000c4 <graphic_ctrl_bit_clear>
			break;
20000124:	e013      	b.n	2000014e <select_controller+0x56>
		case B_CS1:
			graphic_ctrl_bit_set(B_CS1);
20000126:	2008      	movs	r0, #8
20000128:	f7ff ffb1 	bl	2000008e <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
2000012c:	2010      	movs	r0, #16
2000012e:	f7ff ffc9 	bl	200000c4 <graphic_ctrl_bit_clear>
			break;
20000132:	e00c      	b.n	2000014e <select_controller+0x56>
		case B_CS2:
			graphic_ctrl_bit_set(B_CS2);
20000134:	2010      	movs	r0, #16
20000136:	f7ff ffaa 	bl	2000008e <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
2000013a:	2008      	movs	r0, #8
2000013c:	f7ff ffc2 	bl	200000c4 <graphic_ctrl_bit_clear>
			break;
20000140:	e005      	b.n	2000014e <select_controller+0x56>
		case (B_CS1 | B_CS2):
			graphic_ctrl_bit_set(B_CS1 | B_CS2);
20000142:	2018      	movs	r0, #24
20000144:	f7ff ffa3 	bl	2000008e <graphic_ctrl_bit_set>
		default:
			graphic_ctrl_bit_clear(B_CS1 | B_CS2);
20000148:	2018      	movs	r0, #24
2000014a:	f7ff ffbb 	bl	200000c4 <graphic_ctrl_bit_clear>
	}
}
2000014e:	46c0      	nop			; (mov r8, r8)
20000150:	46bd      	mov	sp, r7
20000152:	b002      	add	sp, #8
20000154:	bd80      	pop	{r7, pc}

20000156 <graphic_wait_ready>:




//Undersök ''busy'' flaggan, och returnera från funktion när den blir 0
void graphic_wait_ready(void){
20000156:	b580      	push	{r7, lr}
20000158:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_clear(B_E);
2000015a:	2040      	movs	r0, #64	; 0x40
2000015c:	f7ff ffb2 	bl	200000c4 <graphic_ctrl_bit_clear>
	
	*portModerE = 0x00005555;  //15-8 utgång, 7-0 ingång
20000160:	4b12      	ldr	r3, [pc, #72]	; (200001ac <graphic_wait_ready+0x56>)
20000162:	4a13      	ldr	r2, [pc, #76]	; (200001b0 <graphic_wait_ready+0x5a>)
20000164:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000166:	2001      	movs	r0, #1
20000168:	f7ff ffac 	bl	200000c4 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW); //Gör så vi kollar status
2000016c:	2002      	movs	r0, #2
2000016e:	f7ff ff8e 	bl	2000008e <graphic_ctrl_bit_set>
	delay_500ns();
20000172:	f7ff ff52 	bl	2000001a <delay_500ns>
	
	while(*portIdrHighE & 1<<7){ //gör detta medan busy-flaggan inte är 0
20000176:	e009      	b.n	2000018c <graphic_wait_ready+0x36>
		graphic_ctrl_bit_set(B_E);
20000178:	2040      	movs	r0, #64	; 0x40
2000017a:	f7ff ff88 	bl	2000008e <graphic_ctrl_bit_set>
		delay_500ns();
2000017e:	f7ff ff4c 	bl	2000001a <delay_500ns>
		graphic_ctrl_bit_clear(B_E);
20000182:	2040      	movs	r0, #64	; 0x40
20000184:	f7ff ff9e 	bl	200000c4 <graphic_ctrl_bit_clear>
		delay_500ns();
20000188:	f7ff ff47 	bl	2000001a <delay_500ns>
	while(*portIdrHighE & 1<<7){ //gör detta medan busy-flaggan inte är 0
2000018c:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <graphic_wait_ready+0x5e>)
2000018e:	781b      	ldrb	r3, [r3, #0]
20000190:	b2db      	uxtb	r3, r3
20000192:	b25b      	sxtb	r3, r3
20000194:	2b00      	cmp	r3, #0
20000196:	dbef      	blt.n	20000178 <graphic_wait_ready+0x22>
	}
	
	graphic_ctrl_bit_set(B_E);
20000198:	2040      	movs	r0, #64	; 0x40
2000019a:	f7ff ff78 	bl	2000008e <graphic_ctrl_bit_set>
	*portModerE = 0x55555555; //15-0 utgång
2000019e:	4b03      	ldr	r3, [pc, #12]	; (200001ac <graphic_wait_ready+0x56>)
200001a0:	4a05      	ldr	r2, [pc, #20]	; (200001b8 <graphic_wait_ready+0x62>)
200001a2:	601a      	str	r2, [r3, #0]
}
200001a4:	46c0      	nop			; (mov r8, r8)
200001a6:	46bd      	mov	sp, r7
200001a8:	bd80      	pop	{r7, pc}
200001aa:	46c0      	nop			; (mov r8, r8)
200001ac:	40021000 	andmi	r1, r2, r0
200001b0:	00005555 	andeq	r5, r0, r5, asr r5
200001b4:	40021011 	andmi	r1, r2, r1, lsl r0
200001b8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001bc <graphic_read>:



unsigned char graphic_read(unsigned char controller){
200001bc:	b580      	push	{r7, lr}
200001be:	b084      	sub	sp, #16
200001c0:	af00      	add	r7, sp, #0
200001c2:	0002      	movs	r2, r0
200001c4:	1dfb      	adds	r3, r7, #7
200001c6:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200001c8:	2040      	movs	r0, #64	; 0x40
200001ca:	f7ff ff7b 	bl	200000c4 <graphic_ctrl_bit_clear>
	
	*portModerE = 0x00005555;  //15-8 utgång, 7-0 ingång
200001ce:	4b1d      	ldr	r3, [pc, #116]	; (20000244 <graphic_read+0x88>)
200001d0:	4a1d      	ldr	r2, [pc, #116]	; (20000248 <graphic_read+0x8c>)
200001d2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS);
200001d4:	2001      	movs	r0, #1
200001d6:	f7ff ff5a 	bl	2000008e <graphic_ctrl_bit_set>
	graphic_ctrl_bit_set(B_RW); //Gör så vi kan läsa data
200001da:	2002      	movs	r0, #2
200001dc:	f7ff ff57 	bl	2000008e <graphic_ctrl_bit_set>
	select_controller(controller);
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	781b      	ldrb	r3, [r3, #0]
200001e4:	0018      	movs	r0, r3
200001e6:	f7ff ff87 	bl	200000f8 <select_controller>
	delay_500ns();
200001ea:	f7ff ff16 	bl	2000001a <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200001ee:	2040      	movs	r0, #64	; 0x40
200001f0:	f7ff ff4d 	bl	2000008e <graphic_ctrl_bit_set>
	delay_500ns();
200001f4:	f7ff ff11 	bl	2000001a <delay_500ns>
	unsigned char RV = *portIdrHighE;
200001f8:	4a14      	ldr	r2, [pc, #80]	; (2000024c <graphic_read+0x90>)
200001fa:	230f      	movs	r3, #15
200001fc:	18fb      	adds	r3, r7, r3
200001fe:	7812      	ldrb	r2, [r2, #0]
20000200:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000202:	2040      	movs	r0, #64	; 0x40
20000204:	f7ff ff5e 	bl	200000c4 <graphic_ctrl_bit_clear>
	*portModerE = 0x55555555; //15-0 utgång
20000208:	4b0e      	ldr	r3, [pc, #56]	; (20000244 <graphic_read+0x88>)
2000020a:	4a11      	ldr	r2, [pc, #68]	; (20000250 <graphic_read+0x94>)
2000020c:	601a      	str	r2, [r3, #0]
	
	if (controller == B_CS1){
2000020e:	1dfb      	adds	r3, r7, #7
20000210:	781b      	ldrb	r3, [r3, #0]
20000212:	2b08      	cmp	r3, #8
20000214:	d105      	bne.n	20000222 <graphic_read+0x66>
		select_controller(B_CS1);
20000216:	2008      	movs	r0, #8
20000218:	f7ff ff6e 	bl	200000f8 <select_controller>
		graphic_wait_ready();
2000021c:	f7ff ff9b 	bl	20000156 <graphic_wait_ready>
20000220:	e008      	b.n	20000234 <graphic_read+0x78>
	} else if (controller == B_CS2){
20000222:	1dfb      	adds	r3, r7, #7
20000224:	781b      	ldrb	r3, [r3, #0]
20000226:	2b10      	cmp	r3, #16
20000228:	d104      	bne.n	20000234 <graphic_read+0x78>
		select_controller(B_CS2);
2000022a:	2010      	movs	r0, #16
2000022c:	f7ff ff64 	bl	200000f8 <select_controller>
		graphic_wait_ready();
20000230:	f7ff ff91 	bl	20000156 <graphic_wait_ready>
	}
	return RV;
20000234:	230f      	movs	r3, #15
20000236:	18fb      	adds	r3, r7, r3
20000238:	781b      	ldrb	r3, [r3, #0]
}
2000023a:	0018      	movs	r0, r3
2000023c:	46bd      	mov	sp, r7
2000023e:	b004      	add	sp, #16
20000240:	bd80      	pop	{r7, pc}
20000242:	46c0      	nop			; (mov r8, r8)
20000244:	40021000 	andmi	r1, r2, r0
20000248:	00005555 	andeq	r5, r0, r5, asr r5
2000024c:	40021011 	andmi	r1, r2, r1, lsl r0
20000250:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000254 <graphic_write>:


void graphic_write(unsigned char value, unsigned char controller){
20000254:	b580      	push	{r7, lr}
20000256:	b082      	sub	sp, #8
20000258:	af00      	add	r7, sp, #0
2000025a:	0002      	movs	r2, r0
2000025c:	1dfb      	adds	r3, r7, #7
2000025e:	701a      	strb	r2, [r3, #0]
20000260:	1dbb      	adds	r3, r7, #6
20000262:	1c0a      	adds	r2, r1, #0
20000264:	701a      	strb	r2, [r3, #0]
	*portOdrHighE = value;
20000266:	4a1a      	ldr	r2, [pc, #104]	; (200002d0 <graphic_write+0x7c>)
20000268:	1dfb      	adds	r3, r7, #7
2000026a:	781b      	ldrb	r3, [r3, #0]
2000026c:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
2000026e:	1dbb      	adds	r3, r7, #6
20000270:	781b      	ldrb	r3, [r3, #0]
20000272:	0018      	movs	r0, r3
20000274:	f7ff ff40 	bl	200000f8 <select_controller>
	delay_500ns();
20000278:	f7ff fecf 	bl	2000001a <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000027c:	2040      	movs	r0, #64	; 0x40
2000027e:	f7ff ff06 	bl	2000008e <graphic_ctrl_bit_set>
	delay_500ns();
20000282:	f7ff feca 	bl	2000001a <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000286:	2040      	movs	r0, #64	; 0x40
20000288:	f7ff ff1c 	bl	200000c4 <graphic_ctrl_bit_clear>
	
	if (controller & B_CS1){
2000028c:	1dbb      	adds	r3, r7, #6
2000028e:	781b      	ldrb	r3, [r3, #0]
20000290:	2208      	movs	r2, #8
20000292:	4013      	ands	r3, r2
20000294:	d005      	beq.n	200002a2 <graphic_write+0x4e>
		select_controller(B_CS1);
20000296:	2008      	movs	r0, #8
20000298:	f7ff ff2e 	bl	200000f8 <select_controller>
		graphic_wait_ready();
2000029c:	f7ff ff5b 	bl	20000156 <graphic_wait_ready>
200002a0:	e009      	b.n	200002b6 <graphic_write+0x62>
	} else if (controller & B_CS2){
200002a2:	1dbb      	adds	r3, r7, #6
200002a4:	781b      	ldrb	r3, [r3, #0]
200002a6:	2210      	movs	r2, #16
200002a8:	4013      	ands	r3, r2
200002aa:	d004      	beq.n	200002b6 <graphic_write+0x62>
		select_controller(B_CS2);
200002ac:	2010      	movs	r0, #16
200002ae:	f7ff ff23 	bl	200000f8 <select_controller>
		graphic_wait_ready();
200002b2:	f7ff ff50 	bl	20000156 <graphic_wait_ready>
	}
	
	*portOdrHighE = 0;
200002b6:	4b06      	ldr	r3, [pc, #24]	; (200002d0 <graphic_write+0x7c>)
200002b8:	2200      	movs	r2, #0
200002ba:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_set(B_E);
200002bc:	2040      	movs	r0, #64	; 0x40
200002be:	f7ff fee6 	bl	2000008e <graphic_ctrl_bit_set>
	select_controller(0);
200002c2:	2000      	movs	r0, #0
200002c4:	f7ff ff18 	bl	200000f8 <select_controller>
}
200002c8:	46c0      	nop			; (mov r8, r8)
200002ca:	46bd      	mov	sp, r7
200002cc:	b002      	add	sp, #8
200002ce:	bd80      	pop	{r7, pc}
200002d0:	40021015 	andmi	r1, r2, r5, lsl r0

200002d4 <graphic_write_command>:


void graphic_write_command(uint8_t command, uint8_t controller){
200002d4:	b580      	push	{r7, lr}
200002d6:	b082      	sub	sp, #8
200002d8:	af00      	add	r7, sp, #0
200002da:	0002      	movs	r2, r0
200002dc:	1dfb      	adds	r3, r7, #7
200002de:	701a      	strb	r2, [r3, #0]
200002e0:	1dbb      	adds	r3, r7, #6
200002e2:	1c0a      	adds	r2, r1, #0
200002e4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002e6:	2040      	movs	r0, #64	; 0x40
200002e8:	f7ff feec 	bl	200000c4 <graphic_ctrl_bit_clear>
	select_controller(controller);
200002ec:	1dbb      	adds	r3, r7, #6
200002ee:	781b      	ldrb	r3, [r3, #0]
200002f0:	0018      	movs	r0, r3
200002f2:	f7ff ff01 	bl	200000f8 <select_controller>
	graphic_ctrl_bit_clear(B_RS);
200002f6:	2001      	movs	r0, #1
200002f8:	f7ff fee4 	bl	200000c4 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_clear(B_RW);
200002fc:	2002      	movs	r0, #2
200002fe:	f7ff fee1 	bl	200000c4 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000302:	1dbb      	adds	r3, r7, #6
20000304:	781a      	ldrb	r2, [r3, #0]
20000306:	1dfb      	adds	r3, r7, #7
20000308:	781b      	ldrb	r3, [r3, #0]
2000030a:	0011      	movs	r1, r2
2000030c:	0018      	movs	r0, r3
2000030e:	f7ff ffa1 	bl	20000254 <graphic_write>
}
20000312:	46c0      	nop			; (mov r8, r8)
20000314:	46bd      	mov	sp, r7
20000316:	b002      	add	sp, #8
20000318:	bd80      	pop	{r7, pc}

2000031a <graphic_write_data>:

void graphic_write_data(uint8_t data, uint8_t controller){
2000031a:	b580      	push	{r7, lr}
2000031c:	b082      	sub	sp, #8
2000031e:	af00      	add	r7, sp, #0
20000320:	0002      	movs	r2, r0
20000322:	1dfb      	adds	r3, r7, #7
20000324:	701a      	strb	r2, [r3, #0]
20000326:	1dbb      	adds	r3, r7, #6
20000328:	1c0a      	adds	r2, r1, #0
2000032a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000032c:	2040      	movs	r0, #64	; 0x40
2000032e:	f7ff fec9 	bl	200000c4 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000332:	1dbb      	adds	r3, r7, #6
20000334:	781b      	ldrb	r3, [r3, #0]
20000336:	0018      	movs	r0, r3
20000338:	f7ff fede 	bl	200000f8 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000033c:	2001      	movs	r0, #1
2000033e:	f7ff fea6 	bl	2000008e <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000342:	2002      	movs	r0, #2
20000344:	f7ff febe 	bl	200000c4 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000348:	1dbb      	adds	r3, r7, #6
2000034a:	781a      	ldrb	r2, [r3, #0]
2000034c:	1dfb      	adds	r3, r7, #7
2000034e:	781b      	ldrb	r3, [r3, #0]
20000350:	0011      	movs	r1, r2
20000352:	0018      	movs	r0, r3
20000354:	f7ff ff7e 	bl	20000254 <graphic_write>
}
20000358:	46c0      	nop			; (mov r8, r8)
2000035a:	46bd      	mov	sp, r7
2000035c:	b002      	add	sp, #8
2000035e:	bd80      	pop	{r7, pc}

20000360 <graphic_read_data>:

unsigned char graphic_read_data(unsigned char controller){
20000360:	b580      	push	{r7, lr}
20000362:	b082      	sub	sp, #8
20000364:	af00      	add	r7, sp, #0
20000366:	0002      	movs	r2, r0
20000368:	1dfb      	adds	r3, r7, #7
2000036a:	701a      	strb	r2, [r3, #0]
	graphic_read(controller); //Nonsens
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	781b      	ldrb	r3, [r3, #0]
20000370:	0018      	movs	r0, r3
20000372:	f7ff ff23 	bl	200001bc <graphic_read>
	return graphic_read(controller); //korrekt data
20000376:	1dfb      	adds	r3, r7, #7
20000378:	781b      	ldrb	r3, [r3, #0]
2000037a:	0018      	movs	r0, r3
2000037c:	f7ff ff1e 	bl	200001bc <graphic_read>
20000380:	0003      	movs	r3, r0
}
20000382:	0018      	movs	r0, r3
20000384:	46bd      	mov	sp, r7
20000386:	b002      	add	sp, #8
20000388:	bd80      	pop	{r7, pc}

2000038a <init_app>:



void init_app(void){
2000038a:	b580      	push	{r7, lr}
2000038c:	af00      	add	r7, sp, #0
	*portModerE = 0x55555555; //15-0 utport
2000038e:	4b03      	ldr	r3, [pc, #12]	; (2000039c <init_app+0x12>)
20000390:	4a03      	ldr	r2, [pc, #12]	; (200003a0 <init_app+0x16>)
20000392:	601a      	str	r2, [r3, #0]
}
20000394:	46c0      	nop			; (mov r8, r8)
20000396:	46bd      	mov	sp, r7
20000398:	bd80      	pop	{r7, pc}
2000039a:	46c0      	nop			; (mov r8, r8)
2000039c:	40021000 	andmi	r1, r2, r0
200003a0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003a4 <graphic_initialize>:

void graphic_initialize(void){
200003a4:	b580      	push	{r7, lr}
200003a6:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
200003a8:	2040      	movs	r0, #64	; 0x40
200003aa:	f7ff fe70 	bl	2000008e <graphic_ctrl_bit_set>
	delay_mikro(10);
200003ae:	200a      	movs	r0, #10
200003b0:	f7ff fe3c 	bl	2000002c <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1 | B_CS2 | B_RST | B_E);
200003b4:	2078      	movs	r0, #120	; 0x78
200003b6:	f7ff fe85 	bl	200000c4 <graphic_ctrl_bit_clear>
	//delay_milli(30);
	graphic_ctrl_bit_set(B_RST);
200003ba:	2020      	movs	r0, #32
200003bc:	f7ff fe67 	bl	2000008e <graphic_ctrl_bit_set>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
200003c0:	2118      	movs	r1, #24
200003c2:	203e      	movs	r0, #62	; 0x3e
200003c4:	f7ff ff86 	bl	200002d4 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);         //toggla display
200003c8:	2118      	movs	r1, #24
200003ca:	203f      	movs	r0, #63	; 0x3f
200003cc:	f7ff ff82 	bl	200002d4 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2); //start=0
200003d0:	2118      	movs	r1, #24
200003d2:	20c0      	movs	r0, #192	; 0xc0
200003d4:	f7ff ff7e 	bl	200002d4 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);    //add=0
200003d8:	2118      	movs	r1, #24
200003da:	2040      	movs	r0, #64	; 0x40
200003dc:	f7ff ff7a 	bl	200002d4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);   //page=0
200003e0:	2118      	movs	r1, #24
200003e2:	20b8      	movs	r0, #184	; 0xb8
200003e4:	f7ff ff76 	bl	200002d4 <graphic_write_command>
	select_controller(0);                               //deaktivera båda CS-signalerna
200003e8:	2000      	movs	r0, #0
200003ea:	f7ff fe85 	bl	200000f8 <select_controller>
}
200003ee:	46c0      	nop			; (mov r8, r8)
200003f0:	46bd      	mov	sp, r7
200003f2:	bd80      	pop	{r7, pc}

200003f4 <graphic_clear_screen>:


void graphic_clear_screen(void){
200003f4:	b580      	push	{r7, lr}
200003f6:	b082      	sub	sp, #8
200003f8:	af00      	add	r7, sp, #0
	for (int i = 0; i<=7; i++){
200003fa:	2300      	movs	r3, #0
200003fc:	607b      	str	r3, [r7, #4]
200003fe:	e01e      	b.n	2000043e <graphic_clear_screen+0x4a>
		graphic_write_command(LCD_SET_PAGE | i, B_CS1|B_CS2);
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	b25b      	sxtb	r3, r3
20000404:	2248      	movs	r2, #72	; 0x48
20000406:	4252      	negs	r2, r2
20000408:	4313      	orrs	r3, r2
2000040a:	b25b      	sxtb	r3, r3
2000040c:	b2db      	uxtb	r3, r3
2000040e:	2118      	movs	r1, #24
20000410:	0018      	movs	r0, r3
20000412:	f7ff ff5f 	bl	200002d4 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000416:	2118      	movs	r1, #24
20000418:	2040      	movs	r0, #64	; 0x40
2000041a:	f7ff ff5b 	bl	200002d4 <graphic_write_command>
		for(int w = 0; w<=63; w++){
2000041e:	2300      	movs	r3, #0
20000420:	603b      	str	r3, [r7, #0]
20000422:	e006      	b.n	20000432 <graphic_clear_screen+0x3e>
			graphic_write_data(0, B_CS1|B_CS2);
20000424:	2118      	movs	r1, #24
20000426:	2000      	movs	r0, #0
20000428:	f7ff ff77 	bl	2000031a <graphic_write_data>
		for(int w = 0; w<=63; w++){
2000042c:	683b      	ldr	r3, [r7, #0]
2000042e:	3301      	adds	r3, #1
20000430:	603b      	str	r3, [r7, #0]
20000432:	683b      	ldr	r3, [r7, #0]
20000434:	2b3f      	cmp	r3, #63	; 0x3f
20000436:	ddf5      	ble.n	20000424 <graphic_clear_screen+0x30>
	for (int i = 0; i<=7; i++){
20000438:	687b      	ldr	r3, [r7, #4]
2000043a:	3301      	adds	r3, #1
2000043c:	607b      	str	r3, [r7, #4]
2000043e:	687b      	ldr	r3, [r7, #4]
20000440:	2b07      	cmp	r3, #7
20000442:	dddd      	ble.n	20000400 <graphic_clear_screen+0xc>
		}
	}
}
20000444:	46c0      	nop			; (mov r8, r8)
20000446:	46bd      	mov	sp, r7
20000448:	b002      	add	sp, #8
2000044a:	bd80      	pop	{r7, pc}

2000044c <pixel>:


void pixel(unsigned char x, unsigned char y, unsigned char set){
2000044c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000044e:	b085      	sub	sp, #20
20000450:	af00      	add	r7, sp, #0
20000452:	0004      	movs	r4, r0
20000454:	0008      	movs	r0, r1
20000456:	0011      	movs	r1, r2
20000458:	1dfb      	adds	r3, r7, #7
2000045a:	1c22      	adds	r2, r4, #0
2000045c:	701a      	strb	r2, [r3, #0]
2000045e:	1dbb      	adds	r3, r7, #6
20000460:	1c02      	adds	r2, r0, #0
20000462:	701a      	strb	r2, [r3, #0]
20000464:	1d7b      	adds	r3, r7, #5
20000466:	1c0a      	adds	r2, r1, #0
20000468:	701a      	strb	r2, [r3, #0]
	if(x < 1 || x > 128 || y < 1 || y > 64 || set < 0 || set > 1){  //kolla så värdena är tillåtna
2000046a:	1dfb      	adds	r3, r7, #7
2000046c:	781b      	ldrb	r3, [r3, #0]
2000046e:	2b00      	cmp	r3, #0
20000470:	d100      	bne.n	20000474 <pixel+0x28>
20000472:	e0cb      	b.n	2000060c <pixel+0x1c0>
20000474:	1dfb      	adds	r3, r7, #7
20000476:	781b      	ldrb	r3, [r3, #0]
20000478:	2b80      	cmp	r3, #128	; 0x80
2000047a:	d900      	bls.n	2000047e <pixel+0x32>
2000047c:	e0c6      	b.n	2000060c <pixel+0x1c0>
2000047e:	1dbb      	adds	r3, r7, #6
20000480:	781b      	ldrb	r3, [r3, #0]
20000482:	2b00      	cmp	r3, #0
20000484:	d100      	bne.n	20000488 <pixel+0x3c>
20000486:	e0c1      	b.n	2000060c <pixel+0x1c0>
20000488:	1dbb      	adds	r3, r7, #6
2000048a:	781b      	ldrb	r3, [r3, #0]
2000048c:	2b40      	cmp	r3, #64	; 0x40
2000048e:	d900      	bls.n	20000492 <pixel+0x46>
20000490:	e0bc      	b.n	2000060c <pixel+0x1c0>
20000492:	1d7b      	adds	r3, r7, #5
20000494:	781b      	ldrb	r3, [r3, #0]
20000496:	2b01      	cmp	r3, #1
20000498:	d900      	bls.n	2000049c <pixel+0x50>
2000049a:	e0b7      	b.n	2000060c <pixel+0x1c0>
		return;
	}
	
	unsigned char index = (y-1)/8;
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781b      	ldrb	r3, [r3, #0]
200004a0:	3b01      	subs	r3, #1
200004a2:	2b00      	cmp	r3, #0
200004a4:	da00      	bge.n	200004a8 <pixel+0x5c>
200004a6:	3307      	adds	r3, #7
200004a8:	10db      	asrs	r3, r3, #3
200004aa:	001a      	movs	r2, r3
200004ac:	230c      	movs	r3, #12
200004ae:	18fb      	adds	r3, r7, r3
200004b0:	701a      	strb	r2, [r3, #0]
	unsigned char bitmask;
	unsigned char controller;
	unsigned char x_fysisk;
	
	switch((y-1) % 8){
200004b2:	1dbb      	adds	r3, r7, #6
200004b4:	781b      	ldrb	r3, [r3, #0]
200004b6:	3b01      	subs	r3, #1
200004b8:	4a56      	ldr	r2, [pc, #344]	; (20000614 <pixel+0x1c8>)
200004ba:	4013      	ands	r3, r2
200004bc:	d504      	bpl.n	200004c8 <pixel+0x7c>
200004be:	3b01      	subs	r3, #1
200004c0:	2208      	movs	r2, #8
200004c2:	4252      	negs	r2, r2
200004c4:	4313      	orrs	r3, r2
200004c6:	3301      	adds	r3, #1
200004c8:	2b07      	cmp	r3, #7
200004ca:	d82c      	bhi.n	20000526 <pixel+0xda>
200004cc:	009a      	lsls	r2, r3, #2
200004ce:	4b52      	ldr	r3, [pc, #328]	; (20000618 <pixel+0x1cc>)
200004d0:	18d3      	adds	r3, r2, r3
200004d2:	681b      	ldr	r3, [r3, #0]
200004d4:	469f      	mov	pc, r3
		case 0:
			bitmask = 1;
200004d6:	230f      	movs	r3, #15
200004d8:	18fb      	adds	r3, r7, r3
200004da:	2201      	movs	r2, #1
200004dc:	701a      	strb	r2, [r3, #0]
			break;
200004de:	e022      	b.n	20000526 <pixel+0xda>
		case 1:
			bitmask = 2;
200004e0:	230f      	movs	r3, #15
200004e2:	18fb      	adds	r3, r7, r3
200004e4:	2202      	movs	r2, #2
200004e6:	701a      	strb	r2, [r3, #0]
			break;
200004e8:	e01d      	b.n	20000526 <pixel+0xda>
		case 2:
			bitmask = 4;
200004ea:	230f      	movs	r3, #15
200004ec:	18fb      	adds	r3, r7, r3
200004ee:	2204      	movs	r2, #4
200004f0:	701a      	strb	r2, [r3, #0]
			break;
200004f2:	e018      	b.n	20000526 <pixel+0xda>
		case 3:
			bitmask = 8;
200004f4:	230f      	movs	r3, #15
200004f6:	18fb      	adds	r3, r7, r3
200004f8:	2208      	movs	r2, #8
200004fa:	701a      	strb	r2, [r3, #0]
			break;
200004fc:	e013      	b.n	20000526 <pixel+0xda>
		case 4:
			bitmask = 0x10;
200004fe:	230f      	movs	r3, #15
20000500:	18fb      	adds	r3, r7, r3
20000502:	2210      	movs	r2, #16
20000504:	701a      	strb	r2, [r3, #0]
			break;
20000506:	e00e      	b.n	20000526 <pixel+0xda>
		case 5:
			bitmask = 0x20;
20000508:	230f      	movs	r3, #15
2000050a:	18fb      	adds	r3, r7, r3
2000050c:	2220      	movs	r2, #32
2000050e:	701a      	strb	r2, [r3, #0]
			break;
20000510:	e009      	b.n	20000526 <pixel+0xda>
		case 6:
			bitmask = 0x40;
20000512:	230f      	movs	r3, #15
20000514:	18fb      	adds	r3, r7, r3
20000516:	2240      	movs	r2, #64	; 0x40
20000518:	701a      	strb	r2, [r3, #0]
			break;
2000051a:	e004      	b.n	20000526 <pixel+0xda>
		case 7:
			bitmask = 0x80;
2000051c:	230f      	movs	r3, #15
2000051e:	18fb      	adds	r3, r7, r3
20000520:	2280      	movs	r2, #128	; 0x80
20000522:	701a      	strb	r2, [r3, #0]
			break;
20000524:	46c0      	nop			; (mov r8, r8)
	}
	
	if(set == 0){
20000526:	1d7b      	adds	r3, r7, #5
20000528:	781b      	ldrb	r3, [r3, #0]
2000052a:	2b00      	cmp	r3, #0
2000052c:	d105      	bne.n	2000053a <pixel+0xee>
		bitmask = ~bitmask;
2000052e:	220f      	movs	r2, #15
20000530:	18bb      	adds	r3, r7, r2
20000532:	18ba      	adds	r2, r7, r2
20000534:	7812      	ldrb	r2, [r2, #0]
20000536:	43d2      	mvns	r2, r2
20000538:	701a      	strb	r2, [r3, #0]
	}
	
	if(x > 64){
2000053a:	1dfb      	adds	r3, r7, #7
2000053c:	781b      	ldrb	r3, [r3, #0]
2000053e:	2b40      	cmp	r3, #64	; 0x40
20000540:	d90a      	bls.n	20000558 <pixel+0x10c>
		controller = B_CS2;
20000542:	230e      	movs	r3, #14
20000544:	18fb      	adds	r3, r7, r3
20000546:	2210      	movs	r2, #16
20000548:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - 65;
2000054a:	230d      	movs	r3, #13
2000054c:	18fb      	adds	r3, r7, r3
2000054e:	1dfa      	adds	r2, r7, #7
20000550:	7812      	ldrb	r2, [r2, #0]
20000552:	3a41      	subs	r2, #65	; 0x41
20000554:	701a      	strb	r2, [r3, #0]
20000556:	e009      	b.n	2000056c <pixel+0x120>
	} else{
		controller = B_CS1;
20000558:	230e      	movs	r3, #14
2000055a:	18fb      	adds	r3, r7, r3
2000055c:	2208      	movs	r2, #8
2000055e:	701a      	strb	r2, [r3, #0]
		x_fysisk = x - 1;
20000560:	230d      	movs	r3, #13
20000562:	18fb      	adds	r3, r7, r3
20000564:	1dfa      	adds	r2, r7, #7
20000566:	7812      	ldrb	r2, [r2, #0]
20000568:	3a01      	subs	r2, #1
2000056a:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
2000056c:	260d      	movs	r6, #13
2000056e:	19bb      	adds	r3, r7, r6
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	2240      	movs	r2, #64	; 0x40
20000574:	4313      	orrs	r3, r2
20000576:	b2da      	uxtb	r2, r3
20000578:	250e      	movs	r5, #14
2000057a:	197b      	adds	r3, r7, r5
2000057c:	781b      	ldrb	r3, [r3, #0]
2000057e:	0019      	movs	r1, r3
20000580:	0010      	movs	r0, r2
20000582:	f7ff fea7 	bl	200002d4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | index, controller);
20000586:	230c      	movs	r3, #12
20000588:	18fb      	adds	r3, r7, r3
2000058a:	781b      	ldrb	r3, [r3, #0]
2000058c:	2248      	movs	r2, #72	; 0x48
2000058e:	4252      	negs	r2, r2
20000590:	4313      	orrs	r3, r2
20000592:	b2da      	uxtb	r2, r3
20000594:	197b      	adds	r3, r7, r5
20000596:	781b      	ldrb	r3, [r3, #0]
20000598:	0019      	movs	r1, r3
2000059a:	0010      	movs	r0, r2
2000059c:	f7ff fe9a 	bl	200002d4 <graphic_write_command>
	unsigned char temp = graphic_read_data(controller);
200005a0:	230b      	movs	r3, #11
200005a2:	18fc      	adds	r4, r7, r3
200005a4:	197b      	adds	r3, r7, r5
200005a6:	781b      	ldrb	r3, [r3, #0]
200005a8:	0018      	movs	r0, r3
200005aa:	f7ff fed9 	bl	20000360 <graphic_read_data>
200005ae:	0003      	movs	r3, r0
200005b0:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD | x_fysisk, controller);
200005b2:	19bb      	adds	r3, r7, r6
200005b4:	781b      	ldrb	r3, [r3, #0]
200005b6:	2240      	movs	r2, #64	; 0x40
200005b8:	4313      	orrs	r3, r2
200005ba:	b2da      	uxtb	r2, r3
200005bc:	197b      	adds	r3, r7, r5
200005be:	781b      	ldrb	r3, [r3, #0]
200005c0:	0019      	movs	r1, r3
200005c2:	0010      	movs	r0, r2
200005c4:	f7ff fe86 	bl	200002d4 <graphic_write_command>
	
	
	if(set == 1){
200005c8:	1d7b      	adds	r3, r7, #5
200005ca:	781b      	ldrb	r3, [r3, #0]
200005cc:	2b01      	cmp	r3, #1
200005ce:	d109      	bne.n	200005e4 <pixel+0x198>
		bitmask = (bitmask | temp);
200005d0:	220f      	movs	r2, #15
200005d2:	18bb      	adds	r3, r7, r2
200005d4:	18b9      	adds	r1, r7, r2
200005d6:	220b      	movs	r2, #11
200005d8:	18ba      	adds	r2, r7, r2
200005da:	7809      	ldrb	r1, [r1, #0]
200005dc:	7812      	ldrb	r2, [r2, #0]
200005de:	430a      	orrs	r2, r1
200005e0:	701a      	strb	r2, [r3, #0]
200005e2:	e008      	b.n	200005f6 <pixel+0x1aa>
	} else{
		bitmask = (bitmask & temp);
200005e4:	220f      	movs	r2, #15
200005e6:	18bb      	adds	r3, r7, r2
200005e8:	18ba      	adds	r2, r7, r2
200005ea:	210b      	movs	r1, #11
200005ec:	1879      	adds	r1, r7, r1
200005ee:	7812      	ldrb	r2, [r2, #0]
200005f0:	7809      	ldrb	r1, [r1, #0]
200005f2:	400a      	ands	r2, r1
200005f4:	701a      	strb	r2, [r3, #0]
	}
	
	graphic_write_data(bitmask, controller);
200005f6:	230e      	movs	r3, #14
200005f8:	18fb      	adds	r3, r7, r3
200005fa:	781a      	ldrb	r2, [r3, #0]
200005fc:	230f      	movs	r3, #15
200005fe:	18fb      	adds	r3, r7, r3
20000600:	781b      	ldrb	r3, [r3, #0]
20000602:	0011      	movs	r1, r2
20000604:	0018      	movs	r0, r3
20000606:	f7ff fe88 	bl	2000031a <graphic_write_data>
2000060a:	e000      	b.n	2000060e <pixel+0x1c2>
		return;
2000060c:	46c0      	nop			; (mov r8, r8)
}
2000060e:	46bd      	mov	sp, r7
20000610:	b005      	add	sp, #20
20000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
20000614:	80000007 	andhi	r0, r0, r7
20000618:	20000870 	andcs	r0, r0, r0, ror r8

2000061c <set_object_speed>:


void set_object_speed(POBJECT o, int speedX, int speedY){
2000061c:	b580      	push	{r7, lr}
2000061e:	b084      	sub	sp, #16
20000620:	af00      	add	r7, sp, #0
20000622:	60f8      	str	r0, [r7, #12]
20000624:	60b9      	str	r1, [r7, #8]
20000626:	607a      	str	r2, [r7, #4]
	o->dirX = speedX;
20000628:	68fb      	ldr	r3, [r7, #12]
2000062a:	68ba      	ldr	r2, [r7, #8]
2000062c:	605a      	str	r2, [r3, #4]
	o->dirY = speedY;
2000062e:	68fb      	ldr	r3, [r7, #12]
20000630:	687a      	ldr	r2, [r7, #4]
20000632:	609a      	str	r2, [r3, #8]
}
20000634:	46c0      	nop			; (mov r8, r8)
20000636:	46bd      	mov	sp, r7
20000638:	b004      	add	sp, #16
2000063a:	bd80      	pop	{r7, pc}

2000063c <draw_object>:

void draw_object(POBJECT o){
2000063c:	b580      	push	{r7, lr}
2000063e:	b084      	sub	sp, #16
20000640:	af00      	add	r7, sp, #0
20000642:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numPoints; i++){
20000644:	2300      	movs	r3, #0
20000646:	60fb      	str	r3, [r7, #12]
20000648:	e020      	b.n	2000068c <draw_object+0x50>
		pixel(o->posX + o->geo->px[i].x, o->posY + o->geo->px[i].y, 1);
2000064a:	687b      	ldr	r3, [r7, #4]
2000064c:	68db      	ldr	r3, [r3, #12]
2000064e:	b2da      	uxtb	r2, r3
20000650:	687b      	ldr	r3, [r7, #4]
20000652:	6819      	ldr	r1, [r3, #0]
20000654:	68fb      	ldr	r3, [r7, #12]
20000656:	3304      	adds	r3, #4
20000658:	005b      	lsls	r3, r3, #1
2000065a:	18cb      	adds	r3, r1, r3
2000065c:	3304      	adds	r3, #4
2000065e:	781b      	ldrb	r3, [r3, #0]
20000660:	18d3      	adds	r3, r2, r3
20000662:	b2d8      	uxtb	r0, r3
20000664:	687b      	ldr	r3, [r7, #4]
20000666:	691b      	ldr	r3, [r3, #16]
20000668:	b2da      	uxtb	r2, r3
2000066a:	687b      	ldr	r3, [r7, #4]
2000066c:	6819      	ldr	r1, [r3, #0]
2000066e:	68fb      	ldr	r3, [r7, #12]
20000670:	3304      	adds	r3, #4
20000672:	005b      	lsls	r3, r3, #1
20000674:	18cb      	adds	r3, r1, r3
20000676:	3305      	adds	r3, #5
20000678:	781b      	ldrb	r3, [r3, #0]
2000067a:	18d3      	adds	r3, r2, r3
2000067c:	b2db      	uxtb	r3, r3
2000067e:	2201      	movs	r2, #1
20000680:	0019      	movs	r1, r3
20000682:	f7ff fee3 	bl	2000044c <pixel>
	for(int i = 0; i < o->geo->numPoints; i++){
20000686:	68fb      	ldr	r3, [r7, #12]
20000688:	3301      	adds	r3, #1
2000068a:	60fb      	str	r3, [r7, #12]
2000068c:	687b      	ldr	r3, [r7, #4]
2000068e:	681b      	ldr	r3, [r3, #0]
20000690:	681b      	ldr	r3, [r3, #0]
20000692:	68fa      	ldr	r2, [r7, #12]
20000694:	429a      	cmp	r2, r3
20000696:	dbd8      	blt.n	2000064a <draw_object+0xe>
	}
}
20000698:	46c0      	nop			; (mov r8, r8)
2000069a:	46bd      	mov	sp, r7
2000069c:	b004      	add	sp, #16
2000069e:	bd80      	pop	{r7, pc}

200006a0 <clear_object>:

void clear_object(POBJECT o){
200006a0:	b580      	push	{r7, lr}
200006a2:	b084      	sub	sp, #16
200006a4:	af00      	add	r7, sp, #0
200006a6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numPoints; i++){
200006a8:	2300      	movs	r3, #0
200006aa:	60fb      	str	r3, [r7, #12]
200006ac:	e020      	b.n	200006f0 <clear_object+0x50>
		pixel(o->posX + o->geo->px[i].x, o->posY + o->geo->px[i].y, 0);
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	68db      	ldr	r3, [r3, #12]
200006b2:	b2da      	uxtb	r2, r3
200006b4:	687b      	ldr	r3, [r7, #4]
200006b6:	6819      	ldr	r1, [r3, #0]
200006b8:	68fb      	ldr	r3, [r7, #12]
200006ba:	3304      	adds	r3, #4
200006bc:	005b      	lsls	r3, r3, #1
200006be:	18cb      	adds	r3, r1, r3
200006c0:	3304      	adds	r3, #4
200006c2:	781b      	ldrb	r3, [r3, #0]
200006c4:	18d3      	adds	r3, r2, r3
200006c6:	b2d8      	uxtb	r0, r3
200006c8:	687b      	ldr	r3, [r7, #4]
200006ca:	691b      	ldr	r3, [r3, #16]
200006cc:	b2da      	uxtb	r2, r3
200006ce:	687b      	ldr	r3, [r7, #4]
200006d0:	6819      	ldr	r1, [r3, #0]
200006d2:	68fb      	ldr	r3, [r7, #12]
200006d4:	3304      	adds	r3, #4
200006d6:	005b      	lsls	r3, r3, #1
200006d8:	18cb      	adds	r3, r1, r3
200006da:	3305      	adds	r3, #5
200006dc:	781b      	ldrb	r3, [r3, #0]
200006de:	18d3      	adds	r3, r2, r3
200006e0:	b2db      	uxtb	r3, r3
200006e2:	2200      	movs	r2, #0
200006e4:	0019      	movs	r1, r3
200006e6:	f7ff feb1 	bl	2000044c <pixel>
	for(int i = 0; i < o->geo->numPoints; i++){
200006ea:	68fb      	ldr	r3, [r7, #12]
200006ec:	3301      	adds	r3, #1
200006ee:	60fb      	str	r3, [r7, #12]
200006f0:	687b      	ldr	r3, [r7, #4]
200006f2:	681b      	ldr	r3, [r3, #0]
200006f4:	681b      	ldr	r3, [r3, #0]
200006f6:	68fa      	ldr	r2, [r7, #12]
200006f8:	429a      	cmp	r2, r3
200006fa:	dbd8      	blt.n	200006ae <clear_object+0xe>
	}
}
200006fc:	46c0      	nop			; (mov r8, r8)
200006fe:	46bd      	mov	sp, r7
20000700:	b004      	add	sp, #16
20000702:	bd80      	pop	{r7, pc}

20000704 <move_object>:


void move_object(POBJECT object){
20000704:	b580      	push	{r7, lr}
20000706:	b082      	sub	sp, #8
20000708:	af00      	add	r7, sp, #0
2000070a:	6078      	str	r0, [r7, #4]
	clear_object(object);
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	0018      	movs	r0, r3
20000710:	f7ff ffc6 	bl	200006a0 <clear_object>
	object->posX += object->dirX;
20000714:	687b      	ldr	r3, [r7, #4]
20000716:	68da      	ldr	r2, [r3, #12]
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	685b      	ldr	r3, [r3, #4]
2000071c:	18d2      	adds	r2, r2, r3
2000071e:	687b      	ldr	r3, [r7, #4]
20000720:	60da      	str	r2, [r3, #12]
	object->posY += object->dirY;
20000722:	687b      	ldr	r3, [r7, #4]
20000724:	691a      	ldr	r2, [r3, #16]
20000726:	687b      	ldr	r3, [r7, #4]
20000728:	689b      	ldr	r3, [r3, #8]
2000072a:	18d2      	adds	r2, r2, r3
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	611a      	str	r2, [r3, #16]
	
	if(object->posX < 1 || object->posX + object->geo->sizeX > 128){
20000730:	687b      	ldr	r3, [r7, #4]
20000732:	68db      	ldr	r3, [r3, #12]
20000734:	2b00      	cmp	r3, #0
20000736:	dd07      	ble.n	20000748 <move_object+0x44>
20000738:	687b      	ldr	r3, [r7, #4]
2000073a:	68da      	ldr	r2, [r3, #12]
2000073c:	687b      	ldr	r3, [r7, #4]
2000073e:	681b      	ldr	r3, [r3, #0]
20000740:	685b      	ldr	r3, [r3, #4]
20000742:	18d3      	adds	r3, r2, r3
20000744:	2b80      	cmp	r3, #128	; 0x80
20000746:	dd04      	ble.n	20000752 <move_object+0x4e>
		object->dirX = -object->dirX;
20000748:	687b      	ldr	r3, [r7, #4]
2000074a:	685b      	ldr	r3, [r3, #4]
2000074c:	425a      	negs	r2, r3
2000074e:	687b      	ldr	r3, [r7, #4]
20000750:	605a      	str	r2, [r3, #4]
	}
	
	if(object->posY < 1 || object->posY + object->geo->sizeY > 64){
20000752:	687b      	ldr	r3, [r7, #4]
20000754:	691b      	ldr	r3, [r3, #16]
20000756:	2b00      	cmp	r3, #0
20000758:	dd07      	ble.n	2000076a <move_object+0x66>
2000075a:	687b      	ldr	r3, [r7, #4]
2000075c:	691a      	ldr	r2, [r3, #16]
2000075e:	687b      	ldr	r3, [r7, #4]
20000760:	681b      	ldr	r3, [r3, #0]
20000762:	689b      	ldr	r3, [r3, #8]
20000764:	18d3      	adds	r3, r2, r3
20000766:	2b40      	cmp	r3, #64	; 0x40
20000768:	dd04      	ble.n	20000774 <move_object+0x70>
		object->dirY = -object->dirY;
2000076a:	687b      	ldr	r3, [r7, #4]
2000076c:	689b      	ldr	r3, [r3, #8]
2000076e:	425a      	negs	r2, r3
20000770:	687b      	ldr	r3, [r7, #4]
20000772:	609a      	str	r2, [r3, #8]
	}
	draw_object(object);
20000774:	687b      	ldr	r3, [r7, #4]
20000776:	0018      	movs	r0, r3
20000778:	f7ff ff60 	bl	2000063c <draw_object>
}
2000077c:	46c0      	nop			; (mov r8, r8)
2000077e:	46bd      	mov	sp, r7
20000780:	b002      	add	sp, #8
20000782:	bd80      	pop	{r7, pc}

20000784 <main>:


void main(void)
{
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
	init_app();
2000078a:	f7ff fdfe 	bl	2000038a <init_app>
	graphic_initialize();
2000078e:	f7ff fe09 	bl	200003a4 <graphic_initialize>
	/*
#ifndef SIMULATOR
	graphic_clear_screen();
#endif
  */
	graphic_write_command(LCD_SET_ADD | 10, B_CS1|B_CS2);
20000792:	2118      	movs	r1, #24
20000794:	204a      	movs	r0, #74	; 0x4a
20000796:	f7ff fd9d 	bl	200002d4 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE | 1, B_CS1|B_CS2);
2000079a:	2118      	movs	r1, #24
2000079c:	20b9      	movs	r0, #185	; 0xb9
2000079e:	f7ff fd99 	bl	200002d4 <graphic_write_command>
	graphic_write_data(0xFF, B_CS1|B_CS2);
200007a2:	2118      	movs	r1, #24
200007a4:	20ff      	movs	r0, #255	; 0xff
200007a6:	f7ff fdb8 	bl	2000031a <graphic_write_data>
	
	
	for(int i = 0; i < 128; i++){ //rita en horisontell linje
200007aa:	2300      	movs	r3, #0
200007ac:	60fb      	str	r3, [r7, #12]
200007ae:	e009      	b.n	200007c4 <main+0x40>
		pixel(i, 10, 1);          
200007b0:	68fb      	ldr	r3, [r7, #12]
200007b2:	b2db      	uxtb	r3, r3
200007b4:	2201      	movs	r2, #1
200007b6:	210a      	movs	r1, #10
200007b8:	0018      	movs	r0, r3
200007ba:	f7ff fe47 	bl	2000044c <pixel>
	for(int i = 0; i < 128; i++){ //rita en horisontell linje
200007be:	68fb      	ldr	r3, [r7, #12]
200007c0:	3301      	adds	r3, #1
200007c2:	60fb      	str	r3, [r7, #12]
200007c4:	68fb      	ldr	r3, [r7, #12]
200007c6:	2b7f      	cmp	r3, #127	; 0x7f
200007c8:	ddf2      	ble.n	200007b0 <main+0x2c>
	}
	
	for(int i = 0; i < 64; i++){ //rita en vertikal linje
200007ca:	2300      	movs	r3, #0
200007cc:	60bb      	str	r3, [r7, #8]
200007ce:	e009      	b.n	200007e4 <main+0x60>
		pixel(10, i, 1);
200007d0:	68bb      	ldr	r3, [r7, #8]
200007d2:	b2db      	uxtb	r3, r3
200007d4:	2201      	movs	r2, #1
200007d6:	0019      	movs	r1, r3
200007d8:	200a      	movs	r0, #10
200007da:	f7ff fe37 	bl	2000044c <pixel>
	for(int i = 0; i < 64; i++){ //rita en vertikal linje
200007de:	68bb      	ldr	r3, [r7, #8]
200007e0:	3301      	adds	r3, #1
200007e2:	60bb      	str	r3, [r7, #8]
200007e4:	68bb      	ldr	r3, [r7, #8]
200007e6:	2b3f      	cmp	r3, #63	; 0x3f
200007e8:	ddf2      	ble.n	200007d0 <main+0x4c>
	}
	
	delay_milli(500); //vänta 0.5 sekunder
200007ea:	23fa      	movs	r3, #250	; 0xfa
200007ec:	005b      	lsls	r3, r3, #1
200007ee:	0018      	movs	r0, r3
200007f0:	f7ff fc39 	bl	20000066 <delay_milli>
	
	for(int i = 0; i < 128; i++){ //sudda horisontella linjen
200007f4:	2300      	movs	r3, #0
200007f6:	607b      	str	r3, [r7, #4]
200007f8:	e009      	b.n	2000080e <main+0x8a>
		pixel(i, 10, 0);
200007fa:	687b      	ldr	r3, [r7, #4]
200007fc:	b2db      	uxtb	r3, r3
200007fe:	2200      	movs	r2, #0
20000800:	210a      	movs	r1, #10
20000802:	0018      	movs	r0, r3
20000804:	f7ff fe22 	bl	2000044c <pixel>
	for(int i = 0; i < 128; i++){ //sudda horisontella linjen
20000808:	687b      	ldr	r3, [r7, #4]
2000080a:	3301      	adds	r3, #1
2000080c:	607b      	str	r3, [r7, #4]
2000080e:	687b      	ldr	r3, [r7, #4]
20000810:	2b7f      	cmp	r3, #127	; 0x7f
20000812:	ddf2      	ble.n	200007fa <main+0x76>
	}
	
	for(int i = 0; i < 64; i++){ //sudda vertikala linjen
20000814:	2300      	movs	r3, #0
20000816:	603b      	str	r3, [r7, #0]
20000818:	e009      	b.n	2000082e <main+0xaa>
		pixel(10, i, 0);
2000081a:	683b      	ldr	r3, [r7, #0]
2000081c:	b2db      	uxtb	r3, r3
2000081e:	2200      	movs	r2, #0
20000820:	0019      	movs	r1, r3
20000822:	200a      	movs	r0, #10
20000824:	f7ff fe12 	bl	2000044c <pixel>
	for(int i = 0; i < 64; i++){ //sudda vertikala linjen
20000828:	683b      	ldr	r3, [r7, #0]
2000082a:	3301      	adds	r3, #1
2000082c:	603b      	str	r3, [r7, #0]
2000082e:	683b      	ldr	r3, [r7, #0]
20000830:	2b3f      	cmp	r3, #63	; 0x3f
20000832:	ddf2      	ble.n	2000081a <main+0x96>
	}
	
}
20000834:	46c0      	nop			; (mov r8, r8)
20000836:	46bd      	mov	sp, r7
20000838:	b004      	add	sp, #16
2000083a:	bd80      	pop	{r7, pc}

2000083c <ball_geometry>:
2000083c:	0000000c 	andeq	r0, r0, ip
20000840:	00000004 	andeq	r0, r0, r4
20000844:	00000004 	andeq	r0, r0, r4
20000848:	02000100 	andeq	r0, r0, #0, 2
2000084c:	01010001 	tsteq	r1, r1
20000850:	03010201 	movweq	r0, #4609	; 0x1201
20000854:	01020002 	tsteq	r2, r2
20000858:	03020202 	movweq	r0, #8706	; 0x2202
2000085c:	00000203 	andeq	r0, r0, r3, lsl #4
	...
20000870:	200004d6 	ldrdcs	r0, [r0], -r6
20000874:	200004e0 	andcs	r0, r0, r0, ror #9
20000878:	200004ea 	andcs	r0, r0, sl, ror #9
2000087c:	200004f4 	strdcs	r0, [r0], -r4
20000880:	200004fe 	strdcs	r0, [r0], -lr
20000884:	20000508 	andcs	r0, r0, r8, lsl #10
20000888:	20000512 	andcs	r0, r0, r2, lsl r5
2000088c:	2000051c 	andcs	r0, r0, ip, lsl r5

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000e6a 	andeq	r0, r0, sl, ror #28
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000334 	andeq	r0, r0, r4, lsr r3
  10:	00000c0c 	andeq	r0, r0, ip, lsl #24
  14:	00063900 	andeq	r3, r6, r0, lsl #18
	...
  24:	06010200 	streq	r0, [r1], -r0, lsl #4
  28:	0000043f 	andeq	r0, r0, pc, lsr r4
  2c:	00008c03 	andeq	r8, r0, r3, lsl #24
  30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
  34:	02000000 	andeq	r0, r0, #0
  38:	043d0801 	ldrteq	r0, [sp], #-2049	; 0xfffff7ff
  3c:	02020000 	andeq	r0, r2, #0
  40:	00048b05 	andeq	r8, r4, r5, lsl #22
  44:	07020200 	streq	r0, [r2, -r0, lsl #4]
  48:	00000294 	muleq	r0, r4, r2
  4c:	44050402 	strmi	r0, [r5], #-1026	; 0xfffffbfe
  50:	02000001 	andeq	r0, r0, #1
  54:	00df0704 	sbcseq	r0, pc, r4, lsl #14
  58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  5c:	00013f05 	andeq	r3, r1, r5, lsl #30
  60:	07080200 	streq	r0, [r8, -r0, lsl #4]
  64:	000000da 	ldrdeq	r0, [r0], -sl
  68:	69050404 	stmdbvs	r5, {r2, sl}
  6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
  70:	00e40704 	rsceq	r0, r4, r4, lsl #14
  74:	04050000 	streq	r0, [r5], #-0
  78:	00030303 	andeq	r0, r3, r3, lsl #6
  7c:	83220300 			; <UNDEFINED> instruction: 0x83220300
  80:	06000000 	streq	r0, [r0], -r0
  84:	00008904 	andeq	r8, r0, r4, lsl #18
  88:	05710700 	ldrbeq	r0, [r1, #-1792]!	; 0xfffff900
  8c:	01030000 	mrseq	r0, (UNDEF: 3)
  90:	04000004 	streq	r0, [r0], #-4
  94:	00004c2c 	andeq	r4, r0, ip, lsr #24
  98:	058e0300 	streq	r0, [lr, #768]	; 0x300
  9c:	72040000 	andvc	r0, r4, #0
  a0:	0000004c 	andeq	r0, r0, ip, asr #32
  a4:	00030b08 	andeq	r0, r3, r8, lsl #22
  a8:	01650500 	cmneq	r5, r0, lsl #10
  ac:	0000006f 	andeq	r0, r0, pc, rrx
  b0:	a6040409 	strge	r0, [r4], -r9, lsl #8
  b4:	000000cf 	andeq	r0, r0, pc, asr #1
  b8:	0002ea0a 	andeq	lr, r2, sl, lsl #20
  bc:	a4a80400 	strtge	r0, [r8], #1024	; 0x400
  c0:	0a000000 	beq	c8 <startup-0x1fffff38>
  c4:	00000257 	andeq	r0, r0, r7, asr r2
  c8:	00cfa904 	sbceq	sl, pc, r4, lsl #18
  cc:	0b000000 	bleq	d4 <startup-0x1fffff2c>
  d0:	00000037 	andeq	r0, r0, r7, lsr r0
  d4:	000000df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
  d8:	00006f0c 	andeq	r6, r0, ip, lsl #30
  dc:	0d000300 	stceq	3, cr0, [r0, #-0]
  e0:	00a30408 	adceq	r0, r3, r8, lsl #8
  e4:	0e000001 	cdpeq	0, 0, cr0, cr0, cr1, {0}
  e8:	00000569 	andeq	r0, r0, r9, ror #10
  ec:	0068a504 	rsbeq	sl, r8, r4, lsl #10
  f0:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
  f4:	00000578 	andeq	r0, r0, r8, ror r5
  f8:	00b0aa04 	adcseq	sl, r0, r4, lsl #20
  fc:	00040000 	andeq	r0, r4, r0
 100:	0004c803 	andeq	ip, r4, r3, lsl #16
 104:	dfab0400 	svcle	0x00ab0400
 108:	03000000 	movweq	r0, #0
 10c:	00000214 	andeq	r0, r0, r4, lsl r2
 110:	0078af04 	rsbseq	sl, r8, r4, lsl #30
 114:	e0030000 	and	r0, r3, r0
 118:	06000005 	streq	r0, [r0], -r5
 11c:	00005316 	andeq	r5, r0, r6, lsl r3
 120:	02250f00 	eoreq	r0, r5, #0, 30
 124:	06180000 	ldreq	r0, [r8], -r0
 128:	0001742f 	andeq	r7, r1, pc, lsr #8
 12c:	04e90e00 	strbteq	r0, [r9], #3584	; 0xe00
 130:	31060000 	mrscc	r0, (UNDEF: 6)
 134:	00000174 	andeq	r0, r0, r4, ror r1
 138:	6b5f1000 	blvs	17c4140 <startup-0x1e83bec0>
 13c:	68320600 	ldmdavs	r2!, {r9, sl}
 140:	04000000 	streq	r0, [r0], #-0
 144:	0005540e 	andeq	r5, r5, lr, lsl #8
 148:	68320600 	ldmdavs	r2!, {r9, sl}
 14c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 150:	00020e0e 	andeq	r0, r2, lr, lsl #28
 154:	68320600 	ldmdavs	r2!, {r9, sl}
 158:	0c000000 	stceq	0, cr0, [r0], {-0}
 15c:	0001ac0e 	andeq	sl, r1, lr, lsl #24
 160:	68320600 	ldmdavs	r2!, {r9, sl}
 164:	10000000 	andne	r0, r0, r0
 168:	00785f10 	rsbseq	r5, r8, r0, lsl pc
 16c:	017a3306 	cmneq	sl, r6, lsl #6
 170:	00140000 	andseq	r0, r4, r0
 174:	01210406 			; <UNDEFINED> instruction: 0x01210406
 178:	160b0000 	strne	r0, [fp], -r0
 17c:	8a000001 	bhi	188 <startup-0x1ffffe78>
 180:	0c000001 	stceq	0, cr0, [r0], {1}
 184:	0000006f 	andeq	r0, r0, pc, rrx
 188:	460f0000 	strmi	r0, [pc], -r0
 18c:	24000002 	strcs	r0, [r0], #-2
 190:	02033706 	andeq	r3, r3, #1572864	; 0x180000
 194:	360e0000 	strcc	r0, [lr], -r0
 198:	06000001 	streq	r0, [r0], -r1
 19c:	00006839 	andeq	r6, r0, r9, lsr r8
 1a0:	960e0000 	strls	r0, [lr], -r0
 1a4:	06000005 	streq	r0, [r0], -r5
 1a8:	0000683a 	andeq	r6, r0, sl, lsr r8
 1ac:	590e0400 	stmdbpl	lr, {sl}
 1b0:	06000001 	streq	r0, [r0], -r1
 1b4:	0000683b 	andeq	r6, r0, fp, lsr r8
 1b8:	040e0800 	streq	r0, [lr], #-2048	; 0xfffff800
 1bc:	06000007 	streq	r0, [r0], -r7
 1c0:	0000683c 	andeq	r6, r0, ip, lsr r8
 1c4:	db0e0c00 	blle	3831cc <startup-0x1fc7ce34>
 1c8:	06000003 	streq	r0, [r0], -r3
 1cc:	0000683d 	andeq	r6, r0, sp, lsr r8
 1d0:	1a0e1000 	bne	3841d8 <startup-0x1fc7be28>
 1d4:	06000003 	streq	r0, [r0], -r3
 1d8:	0000683e 	andeq	r6, r0, lr, lsr r8
 1dc:	710e1400 	tstvc	lr, r0, lsl #8
 1e0:	06000006 	streq	r0, [r0], -r6
 1e4:	0000683f 	andeq	r6, r0, pc, lsr r8
 1e8:	950e1800 	strls	r1, [lr, #-2048]	; 0xfffff800
 1ec:	06000004 	streq	r0, [r0], -r4
 1f0:	00006840 	andeq	r6, r0, r0, asr #16
 1f4:	ba0e1c00 	blt	3871fc <startup-0x1fc78e04>
 1f8:	06000006 	streq	r0, [r0], -r6
 1fc:	00006841 	andeq	r6, r0, r1, asr #16
 200:	11002000 	mrsne	r2, (UNDEF: 0)
 204:	00000168 	andeq	r0, r0, r8, ror #2
 208:	4a060108 	bmi	180630 <startup-0x1fe7f9d0>
 20c:	00000243 	andeq	r0, r0, r3, asr #4
 210:	0001fb0e 	andeq	pc, r1, lr, lsl #22
 214:	434b0600 	movtmi	r0, #46592	; 0xb600
 218:	00000002 	andeq	r0, r0, r2
 21c:	0000000e 	andeq	r0, r0, lr
 220:	434c0600 	movtmi	r0, #50688	; 0xc600
 224:	80000002 	andhi	r0, r0, r2
 228:	0005d212 	andeq	sp, r5, r2, lsl r2
 22c:	164e0600 	strbne	r0, [lr], -r0, lsl #12
 230:	00000001 	andeq	r0, r0, r1
 234:	01a41201 			; <UNDEFINED> instruction: 0x01a41201
 238:	51060000 	mrspl	r0, (UNDEF: 6)
 23c:	00000116 	andeq	r0, r0, r6, lsl r1
 240:	0b000104 	bleq	658 <startup-0x1ffff9a8>
 244:	00000076 	andeq	r0, r0, r6, ror r0
 248:	00000253 	andeq	r0, r0, r3, asr r2
 24c:	00006f0c 	andeq	r6, r0, ip, lsl #30
 250:	11001f00 	tstne	r0, r0, lsl #30
 254:	000003e4 	andeq	r0, r0, r4, ror #7
 258:	5d060190 	stfpls	f0, [r6, #-576]	; 0xfffffdc0
 25c:	00000291 	muleq	r0, r1, r2
 260:	0004e90e 	andeq	lr, r4, lr, lsl #18
 264:	915e0600 	cmpls	lr, r0, lsl #12
 268:	00000002 	andeq	r0, r0, r2
 26c:	00050f0e 	andeq	r0, r5, lr, lsl #30
 270:	685f0600 	ldmdavs	pc, {r9, sl}^	; <UNPREDICTABLE>
 274:	04000000 	streq	r0, [r0], #-0
 278:	0002090e 	andeq	r0, r2, lr, lsl #18
 27c:	97610600 	strbls	r0, [r1, -r0, lsl #12]!
 280:	08000002 	stmdaeq	r0, {r1}
 284:	0001680e 	andeq	r6, r1, lr, lsl #16
 288:	03620600 	cmneq	r2, #0, 12
 28c:	88000002 	stmdahi	r0, {r1}
 290:	53040600 	movwpl	r0, #17920	; 0x4600
 294:	0b000002 	bleq	2a4 <startup-0x1ffffd5c>
 298:	000002a7 	andeq	r0, r0, r7, lsr #5
 29c:	000002a7 	andeq	r0, r0, r7, lsr #5
 2a0:	00006f0c 	andeq	r6, r0, ip, lsl #30
 2a4:	06001f00 	streq	r1, [r0], -r0, lsl #30
 2a8:	0002ad04 	andeq	sl, r2, r4, lsl #26
 2ac:	9f0f1300 	svcls	0x000f1300
 2b0:	08000004 	stmdaeq	r0, {r2}
 2b4:	02d37506 	sbcseq	r7, r3, #25165824	; 0x1800000
 2b8:	530e0000 	movwpl	r0, #57344	; 0xe000
 2bc:	06000001 	streq	r0, [r0], -r1
 2c0:	0002d376 	andeq	sp, r2, r6, ror r3
 2c4:	030e0000 	movweq	r0, #57344	; 0xe000
 2c8:	06000002 	streq	r0, [r0], -r2
 2cc:	00006877 	andeq	r6, r0, r7, ror r8
 2d0:	06000400 	streq	r0, [r0], -r0, lsl #8
 2d4:	00003704 	andeq	r3, r0, r4, lsl #14
 2d8:	04d30f00 	ldrbeq	r0, [r3], #3840	; 0xf00
 2dc:	06680000 	strbteq	r0, [r8], -r0
 2e0:	000403b5 			; <UNDEFINED> instruction: 0x000403b5
 2e4:	705f1000 	subsvc	r1, pc, r0
 2e8:	d3b60600 			; <UNDEFINED> instruction: 0xd3b60600
 2ec:	00000002 	andeq	r0, r0, r2
 2f0:	00725f10 	rsbseq	r5, r2, r0, lsl pc
 2f4:	0068b706 	rsbeq	fp, r8, r6, lsl #14
 2f8:	10040000 	andne	r0, r4, r0
 2fc:	0600775f 			; <UNDEFINED> instruction: 0x0600775f
 300:	000068b8 			; <UNDEFINED> instruction: 0x000068b8
 304:	9d0e0800 	stcls	8, cr0, [lr, #-0]
 308:	06000001 	streq	r0, [r0], -r1
 30c:	00003eb9 			; <UNDEFINED> instruction: 0x00003eb9
 310:	750e0c00 	strvc	r0, [lr, #-3072]	; 0xfffff400
 314:	06000002 	streq	r0, [r0], -r2
 318:	00003eba 			; <UNDEFINED> instruction: 0x00003eba
 31c:	5f100e00 	svcpl	0x00100e00
 320:	06006662 	streq	r6, [r0], -r2, ror #12
 324:	0002aebb 			; <UNDEFINED> instruction: 0x0002aebb
 328:	fb0e1000 	blx	384332 <startup-0x1fc7bcce>
 32c:	06000000 	streq	r0, [r0], -r0
 330:	000068bc 			; <UNDEFINED> instruction: 0x000068bc
 334:	760e1800 	strvc	r1, [lr], -r0, lsl #16
 338:	06000001 	streq	r0, [r0], -r1
 33c:	000076c3 	andeq	r7, r0, r3, asr #13
 340:	ae0e1c00 	cdpge	12, 0, cr1, cr14, cr0, {0}
 344:	06000002 	streq	r0, [r0], -r2
 348:	000570c5 	andeq	r7, r5, r5, asr #1
 34c:	5c0e2000 	stcpl	0, cr2, [lr], {-0}
 350:	06000000 	streq	r0, [r0], -r0
 354:	00059ac7 	andeq	r9, r5, r7, asr #21
 358:	800e2400 	andhi	r2, lr, r0, lsl #8
 35c:	06000005 	streq	r0, [r0], -r5
 360:	0005beca 	andeq	fp, r5, sl, asr #29
 364:	d40e2800 	strle	r2, [lr], #-2048	; 0xfffff800
 368:	06000006 	streq	r0, [r0], -r6
 36c:	0005d8cb 	andeq	sp, r5, fp, asr #17
 370:	5f102c00 	svcpl	0x00102c00
 374:	06006275 			; <UNDEFINED> instruction: 0x06006275
 378:	0002aece 	andeq	sl, r2, lr, asr #29
 37c:	5f103000 	svcpl	0x00103000
 380:	06007075 			; <UNDEFINED> instruction: 0x06007075
 384:	0002d3cf 	andeq	sp, r2, pc, asr #7
 388:	5f103800 	svcpl	0x00103800
 38c:	06007275 			; <UNDEFINED> instruction: 0x06007275
 390:	000068d0 	ldrdeq	r6, [r0], -r0
 394:	4d0e3c00 	stcmi	12, cr3, [lr, #-0]
 398:	06000001 	streq	r0, [r0], -r1
 39c:	0005ded3 	ldrdeq	sp, [r5], -r3
 3a0:	ac0e4000 	stcge	0, cr4, [lr], {-0}
 3a4:	06000006 	streq	r0, [r0], -r6
 3a8:	0005eed4 	ldrdeq	lr, [r5], -r4
 3ac:	5f104300 	svcpl	0x00104300
 3b0:	0600626c 	streq	r6, [r0], -ip, ror #4
 3b4:	0002aed7 	ldrdeq	sl, [r2], -r7
 3b8:	b10e4400 	tstlt	lr, r0, lsl #8
 3bc:	06000001 	streq	r0, [r0], -r1
 3c0:	000068da 	ldrdeq	r6, [r0], -sl
 3c4:	ce0e4c00 	cdpgt	12, 0, cr4, cr14, cr0, {0}
 3c8:	06000001 	streq	r0, [r0], -r1
 3cc:	00008edb 	ldrdeq	r8, [r0], -fp
 3d0:	7c0e5000 	stcvc	0, cr5, [lr], {-0}
 3d4:	06000004 	streq	r0, [r0], -r4
 3d8:	000421de 	ldrdeq	r2, [r4], -lr
 3dc:	720e5400 	andvc	r5, lr, #0, 8
 3e0:	06000005 	streq	r0, [r0], -r5
 3e4:	00010be2 	andeq	r0, r1, r2, ror #23
 3e8:	db0e5800 	blle	3963f0 <startup-0x1fc69c10>
 3ec:	06000004 	streq	r0, [r0], -r4
 3f0:	000100e4 	andeq	r0, r1, r4, ror #1
 3f4:	120e5c00 	andne	r5, lr, #0, 24
 3f8:	06000003 	streq	r0, [r0], -r3
 3fc:	000068e5 	andeq	r6, r0, r5, ror #17
 400:	14006400 	strne	r6, [r0], #-1024	; 0xfffffc00
 404:	00000068 	andeq	r0, r0, r8, rrx
 408:	00000421 	andeq	r0, r0, r1, lsr #8
 40c:	00042115 	andeq	r2, r4, r5, lsl r1
 410:	00761500 	rsbseq	r1, r6, r0, lsl #10
 414:	5e150000 	cdppl	0, 1, cr0, cr5, cr0, {0}
 418:	15000005 	strne	r0, [r0, #-5]
 41c:	00000068 	andeq	r0, r0, r8, rrx
 420:	2c040600 	stccs	6, cr0, [r4], {-0}
 424:	16000004 	strne	r0, [r0], -r4
 428:	00000421 	andeq	r0, r0, r1, lsr #8
 42c:	00055c17 	andeq	r5, r5, r7, lsl ip
 430:	06042800 	streq	r2, [r4], -r0, lsl #16
 434:	055e0239 	ldrbeq	r0, [lr, #-569]	; 0xfffffdc7
 438:	84180000 	ldrhi	r0, [r8], #-0
 43c:	06000004 	streq	r0, [r0], -r4
 440:	0068023b 	rsbeq	r0, r8, fp, lsr r2
 444:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 448:	00000681 	andeq	r0, r0, r1, lsl #13
 44c:	45024006 	strmi	r4, [r2, #-6]
 450:	04000006 	streq	r0, [r0], #-6
 454:	00025e18 	andeq	r5, r2, r8, lsl lr
 458:	02400600 	subeq	r0, r0, #0, 12
 45c:	00000645 	andeq	r0, r0, r5, asr #12
 460:	021d1808 	andseq	r1, sp, #8, 16	; 0x80000
 464:	40060000 	andmi	r0, r6, r0
 468:	00064502 	andeq	r4, r6, r2, lsl #10
 46c:	0a180c00 	beq	603474 <startup-0x1f9fcb8c>
 470:	06000005 	streq	r0, [r0], -r5
 474:	00680242 	rsbeq	r0, r8, r2, asr #4
 478:	18100000 	ldmdane	r0, {}	; <UNPREDICTABLE>
 47c:	00000075 	andeq	r0, r0, r5, ror r0
 480:	27024306 	strcs	r4, [r2, -r6, lsl #6]
 484:	14000008 	strne	r0, [r0], #-8
 488:	00053b18 	andeq	r3, r5, r8, lsl fp
 48c:	02460600 	subeq	r0, r6, #0, 12
 490:	00000068 	andeq	r0, r0, r8, rrx
 494:	05291830 	streq	r1, [r9, #-2096]!	; 0xfffff7d0
 498:	47060000 	strmi	r0, [r6, -r0]
 49c:	00083c02 	andeq	r3, r8, r2, lsl #24
 4a0:	f6183400 			; <UNDEFINED> instruction: 0xf6183400
 4a4:	06000003 	streq	r0, [r0], -r3
 4a8:	00680249 	rsbeq	r0, r8, r9, asr #4
 4ac:	18380000 	ldmdane	r8!, {}	; <UNPREDICTABLE>
 4b0:	00000531 	andeq	r0, r0, r1, lsr r5
 4b4:	4d024b06 	vstrmi	d4, [r2, #-24]	; 0xffffffe8
 4b8:	3c000008 	stccc	0, cr0, [r0], {8}
 4bc:	0002e218 	andeq	lr, r2, r8, lsl r2
 4c0:	024e0600 	subeq	r0, lr, #0, 12
 4c4:	00000174 	andeq	r0, r0, r4, ror r1
 4c8:	023c1840 	eorseq	r1, ip, #64, 16	; 0x400000
 4cc:	4f060000 	svcmi	0x00060000
 4d0:	00006802 	andeq	r6, r0, r2, lsl #16
 4d4:	ee184400 	cfmuls	mvf4, mvf8, mvf0
 4d8:	06000006 	streq	r0, [r0], -r6
 4dc:	01740250 	cmneq	r4, r0, asr r2
 4e0:	18480000 	stmdane	r8, {}^	; <UNPREDICTABLE>
 4e4:	00000411 	andeq	r0, r0, r1, lsl r4
 4e8:	53025106 	movwpl	r5, #8454	; 0x2106
 4ec:	4c000008 	stcmi	0, cr0, [r0], {8}
 4f0:	00026d18 	andeq	r6, r2, r8, lsl sp
 4f4:	02540600 	subseq	r0, r4, #0, 12
 4f8:	00000068 	andeq	r0, r0, r8, rrx
 4fc:	01c61850 	biceq	r1, r6, r0, asr r8
 500:	55060000 	strpl	r0, [r6, #-0]
 504:	00055e02 	andeq	r5, r5, r2, lsl #28
 508:	61185400 	tstvs	r8, r0, lsl #8
 50c:	06000004 	streq	r0, [r0], -r4
 510:	08050278 	stmdaeq	r5, {r3, r4, r5, r6, r9}
 514:	19580000 	ldmdbne	r8, {}^	; <UNPREDICTABLE>
 518:	000003e4 	andeq	r0, r0, r4, ror #7
 51c:	91027c06 	tstls	r2, r6, lsl #24
 520:	48000002 	stmdami	r0, {r1}
 524:	02b41901 	adcseq	r1, r4, #16384	; 0x4000
 528:	7d060000 	stcvc	0, cr0, [r6, #-0]
 52c:	00025302 	andeq	r5, r2, r2, lsl #6
 530:	19014c00 	stmdbne	r1, {sl, fp, lr}
 534:	000006a2 	andeq	r0, r0, r2, lsr #13
 538:	64028106 	strvs	r8, [r2], #-262	; 0xfffffefa
 53c:	dc000008 	stcle	0, cr0, [r0], {8}
 540:	017e1902 	cmneq	lr, r2, lsl #18
 544:	86060000 	strhi	r0, [r6], -r0
 548:	00060a02 	andeq	r0, r6, r2, lsl #20
 54c:	1902e000 	stmdbne	r2, {sp, lr, pc}
 550:	00000163 	andeq	r0, r0, r3, ror #2
 554:	70028806 	andvc	r8, r2, r6, lsl #16
 558:	ec000008 	stc	0, cr0, [r0], {8}
 55c:	04060002 	streq	r0, [r6], #-2
 560:	00000564 	andeq	r0, r0, r4, ror #10
 564:	46080102 	strmi	r0, [r8], -r2, lsl #2
 568:	16000004 	strne	r0, [r0], -r4
 56c:	00000564 	andeq	r0, r0, r4, ror #10
 570:	04030406 	streq	r0, [r3], #-1030	; 0xfffffbfa
 574:	68140000 	ldmdavs	r4, {}	; <UNPREDICTABLE>
 578:	94000000 	strls	r0, [r0], #-0
 57c:	15000005 	strne	r0, [r0, #-5]
 580:	00000421 	andeq	r0, r0, r1, lsr #8
 584:	00007615 	andeq	r7, r0, r5, lsl r6
 588:	05941500 	ldreq	r1, [r4, #1280]	; 0x500
 58c:	68150000 	ldmdavs	r5, {}	; <UNPREDICTABLE>
 590:	00000000 	andeq	r0, r0, r0
 594:	056b0406 	strbeq	r0, [fp, #-1030]!	; 0xfffffbfa
 598:	04060000 	streq	r0, [r6], #-0
 59c:	00000576 	andeq	r0, r0, r6, ror r5
 5a0:	00009914 	andeq	r9, r0, r4, lsl r9
 5a4:	0005be00 	andeq	fp, r5, r0, lsl #28
 5a8:	04211500 	strteq	r1, [r1], #-1280	; 0xfffffb00
 5ac:	76150000 	ldrvc	r0, [r5], -r0
 5b0:	15000000 	strne	r0, [r0, #-0]
 5b4:	00000099 	muleq	r0, r9, r0
 5b8:	00006815 	andeq	r6, r0, r5, lsl r8
 5bc:	04060000 	streq	r0, [r6], #-0
 5c0:	000005a0 	andeq	r0, r0, r0, lsr #11
 5c4:	00006814 	andeq	r6, r0, r4, lsl r8
 5c8:	0005d800 	andeq	sp, r5, r0, lsl #16
 5cc:	04211500 	strteq	r1, [r1], #-1280	; 0xfffffb00
 5d0:	76150000 	ldrvc	r0, [r5], -r0
 5d4:	00000000 	andeq	r0, r0, r0
 5d8:	05c40406 	strbeq	r0, [r4, #1030]	; 0x406
 5dc:	370b0000 	strcc	r0, [fp, -r0]
 5e0:	ee000000 	cdp	0, 0, cr0, cr0, cr0, {0}
 5e4:	0c000005 	stceq	0, cr0, [r0], {5}
 5e8:	0000006f 	andeq	r0, r0, pc, rrx
 5ec:	370b0002 	strcc	r0, [fp, -r2]
 5f0:	fe000000 	cdp2	0, 0, cr0, cr0, cr0, {0}
 5f4:	0c000005 	stceq	0, cr0, [r0], {5}
 5f8:	0000006f 	andeq	r0, r0, pc, rrx
 5fc:	c1080000 	mrsgt	r0, (UNDEF: 8)
 600:	06000004 	streq	r0, [r0], -r4
 604:	02d9011f 	sbcseq	r0, r9, #-1073741817	; 0xc0000007
 608:	7b1a0000 	blvc	680610 <startup-0x1f97f9f0>
 60c:	0c000006 	stceq	0, cr0, [r0], {6}
 610:	3f012306 	svccc	0x00012306
 614:	18000006 	stmdane	r0, {r1, r2}
 618:	000004e9 	andeq	r0, r0, r9, ror #9
 61c:	3f012506 	svccc	0x00012506
 620:	00000006 	andeq	r0, r0, r6
 624:	00028318 	andeq	r8, r2, r8, lsl r3
 628:	01260600 			; <UNDEFINED> instruction: 0x01260600
 62c:	00000068 	andeq	r0, r0, r8, rrx
 630:	04a61804 	strteq	r1, [r6], #2052	; 0x804
 634:	27060000 	strcs	r0, [r6, -r0]
 638:	00064501 	andeq	r4, r6, r1, lsl #10
 63c:	06000800 	streq	r0, [r0], -r0, lsl #16
 640:	00060a04 	andeq	r0, r6, r4, lsl #20
 644:	fe040600 	cdp2	6, 0, cr0, cr4, cr0, {0}
 648:	1a000005 	bne	664 <startup-0x1ffff99c>
 64c:	0000006d 	andeq	r0, r0, sp, rrx
 650:	013f060e 	teqeq	pc, lr, lsl #12
 654:	00000680 	andeq	r0, r0, r0, lsl #13
 658:	00056318 	andeq	r6, r5, r8, lsl r3
 65c:	01400600 	cmpeq	r0, r0, lsl #12
 660:	00000680 	andeq	r0, r0, r0, lsl #13
 664:	05bf1800 	ldreq	r1, [pc, #2048]!	; e6c <startup-0x1ffff194>
 668:	41060000 	mrsmi	r0, (UNDEF: 6)
 66c:	00068001 	andeq	r8, r6, r1
 670:	db180600 	blle	601e78 <startup-0x1f9fe188>
 674:	06000005 	streq	r0, [r0], -r5
 678:	00450142 	subeq	r0, r5, r2, asr #2
 67c:	000c0000 	andeq	r0, ip, r0
 680:	0000450b 	andeq	r4, r0, fp, lsl #10
 684:	00069000 	andeq	r9, r6, r0
 688:	006f0c00 	rsbeq	r0, pc, r0, lsl #24
 68c:	00020000 	andeq	r0, r2, r0
 690:	5906d01b 	stmdbpl	r6, {r0, r1, r3, r4, ip, lr, pc}
 694:	00079102 	andeq	r9, r7, r2, lsl #2
 698:	06201800 	strteq	r1, [r0], -r0, lsl #16
 69c:	5b060000 	blpl	1806a4 <startup-0x1fe7f95c>
 6a0:	00006f02 	andeq	r6, r0, r2, lsl #30
 6a4:	c5180000 	ldrgt	r0, [r8, #-0]
 6a8:	06000005 	streq	r0, [r0], -r5
 6ac:	055e025c 	ldrbeq	r0, [lr, #-604]	; 0xfffffda4
 6b0:	18040000 	stmdane	r4, {}	; <UNPREDICTABLE>
 6b4:	000002d5 	ldrdeq	r0, [r0], -r5
 6b8:	91025d06 	tstls	r2, r6, lsl #26
 6bc:	08000007 	stmdaeq	r0, {r0, r1, r2}
 6c0:	0006c518 	andeq	ip, r6, r8, lsl r5
 6c4:	025e0600 	subseq	r0, lr, #0, 12
 6c8:	0000018a 	andeq	r0, r0, sl, lsl #3
 6cc:	022d1824 	eoreq	r1, sp, #36, 16	; 0x240000
 6d0:	5f060000 	svcpl	0x00060000
 6d4:	00006802 	andeq	r6, r0, r2, lsl #16
 6d8:	e4184800 	ldr	r4, [r8], #-2048	; 0xfffff800
 6dc:	06000004 	streq	r0, [r0], -r4
 6e0:	00610260 	rsbeq	r0, r1, r0, ror #4
 6e4:	18500000 	ldmdane	r0, {}^	; <UNPREDICTABLE>
 6e8:	000006db 	ldrdeq	r0, [r0], -fp
 6ec:	4b026106 	blmi	98b0c <startup-0x1ff674f4>
 6f0:	58000006 	stmdapl	r0, {r1, r2}
 6f4:	0004fd18 	andeq	pc, r4, r8, lsl sp	; <UNPREDICTABLE>
 6f8:	02620600 	rsbeq	r0, r2, #0, 12
 6fc:	00000100 	andeq	r0, r0, r0, lsl #2
 700:	06e01868 	strbteq	r1, [r0], r8, ror #16
 704:	63060000 	movwvs	r0, #24576	; 0x6000
 708:	00010002 	andeq	r0, r1, r2
 70c:	2f187000 	svccs	0x00187000
 710:	06000004 	streq	r0, [r0], -r4
 714:	01000264 	tsteq	r0, r4, ror #4
 718:	18780000 	ldmdane	r8!, {}^	; <UNPREDICTABLE>
 71c:	00000698 	muleq	r0, r8, r6
 720:	a1026506 	tstge	r2, r6, lsl #10
 724:	80000007 	andhi	r0, r0, r7
 728:	0002c918 	andeq	ip, r2, r8, lsl r9
 72c:	02660600 	rsbeq	r0, r6, #0, 12
 730:	000007b1 			; <UNDEFINED> instruction: 0x000007b1
 734:	05e81888 	strbeq	r1, [r8, #2184]!	; 0x888
 738:	67060000 	strvs	r0, [r6, -r0]
 73c:	00006802 	andeq	r6, r0, r2, lsl #16
 740:	ed18a000 	ldc	0, cr10, [r8, #-0]
 744:	06000001 	streq	r0, [r0], -r1
 748:	01000268 	tsteq	r0, r8, ror #4
 74c:	18a40000 	stmiane	r4!, {}	; <UNPREDICTABLE>
 750:	00000122 	andeq	r0, r0, r2, lsr #2
 754:	00026906 	andeq	r6, r2, r6, lsl #18
 758:	ac000001 	stcge	0, cr0, [r0], {1}
 75c:	0001d618 	andeq	sp, r1, r8, lsl r6
 760:	026a0600 	rsbeq	r0, sl, #0, 12
 764:	00000100 	andeq	r0, r0, r0, lsl #2
 768:	00ba18b4 	ldrhteq	r1, [sl], r4
 76c:	6b060000 	blvs	180774 <startup-0x1fe7f88c>
 770:	00010002 	andeq	r0, r1, r2
 774:	c918bc00 	ldmdbgt	r8, {sl, fp, ip, sp, pc}
 778:	06000000 	streq	r0, [r0], -r0
 77c:	0100026c 	tsteq	r0, ip, ror #4
 780:	18c40000 	stmiane	r4, {}^	; <UNPREDICTABLE>
 784:	00000482 	andeq	r0, r0, r2, lsl #9
 788:	68026d06 	stmdavs	r2, {r1, r2, r8, sl, fp, sp, lr}
 78c:	cc000000 	stcgt	0, cr0, [r0], {-0}
 790:	05640b00 	strbeq	r0, [r4, #-2816]!	; 0xfffff500
 794:	07a10000 	streq	r0, [r1, r0]!
 798:	6f0c0000 	svcvs	0x000c0000
 79c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
 7a0:	05640b00 	strbeq	r0, [r4, #-2816]!	; 0xfffff500
 7a4:	07b10000 	ldreq	r0, [r1, r0]!
 7a8:	6f0c0000 	svcvs	0x000c0000
 7ac:	07000000 	streq	r0, [r0, -r0]
 7b0:	05640b00 	strbeq	r0, [r4, #-2816]!	; 0xfffff500
 7b4:	07c10000 	strbeq	r0, [r1, r0]
 7b8:	6f0c0000 	svcvs	0x000c0000
 7bc:	17000000 	strne	r0, [r0, -r0]
 7c0:	06f01b00 	ldrbteq	r1, [r0], r0, lsl #22
 7c4:	07e50272 			; <UNDEFINED> instruction: 0x07e50272
 7c8:	d4180000 	ldrle	r0, [r8], #-0
 7cc:	06000003 	streq	r0, [r0], -r3
 7d0:	07e50275 			; <UNDEFINED> instruction: 0x07e50275
 7d4:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 7d8:	0000068f 	andeq	r0, r0, pc, lsl #13
 7dc:	f5027606 			; <UNDEFINED> instruction: 0xf5027606
 7e0:	78000007 	stmdavc	r0, {r0, r1, r2}
 7e4:	02d30b00 	sbcseq	r0, r3, #0, 22
 7e8:	07f50000 	ldrbeq	r0, [r5, r0]!
 7ec:	6f0c0000 	svcvs	0x000c0000
 7f0:	1d000000 	stcne	0, cr0, [r0, #-0]
 7f4:	006f0b00 	rsbeq	r0, pc, r0, lsl #22
 7f8:	08050000 	stmdaeq	r5, {}	; <UNPREDICTABLE>
 7fc:	6f0c0000 	svcvs	0x000c0000
 800:	1d000000 	stcne	0, cr0, [r0, #-0]
 804:	06f01c00 	ldrbteq	r1, [r0], r0, lsl #24
 808:	08270257 	stmdaeq	r7!, {r0, r1, r2, r4, r6, r9}
 80c:	5c1d0000 	ldcpl	0, cr0, [sp], {-0}
 810:	06000005 	streq	r0, [r0], -r5
 814:	0690026e 	ldreq	r0, [r0], lr, ror #4
 818:	b21d0000 	andslt	r0, sp, #0
 81c:	06000006 	streq	r0, [r0], -r6
 820:	07c10277 			; <UNDEFINED> instruction: 0x07c10277
 824:	0b000000 	bleq	82c <startup-0x1ffff7d4>
 828:	00000564 	andeq	r0, r0, r4, ror #10
 82c:	00000837 	andeq	r0, r0, r7, lsr r8
 830:	00006f0c 	andeq	r6, r0, ip, lsl #30
 834:	07001800 	streq	r1, [r0, -r0, lsl #16]
 838:	00000104 	andeq	r0, r0, r4, lsl #2
 83c:	08370406 	ldmdaeq	r7!, {r1, r2, sl}
 840:	4d1e0000 	ldcmi	0, cr0, [lr, #-0]
 844:	15000008 	strne	r0, [r0, #-8]
 848:	00000421 	andeq	r0, r0, r1, lsr #8
 84c:	42040600 	andmi	r0, r4, #0, 12
 850:	06000008 	streq	r0, [r0], -r8
 854:	00017404 	andeq	r7, r1, r4, lsl #8
 858:	08641e00 	stmdaeq	r4!, {r9, sl, fp, ip}^
 85c:	68150000 	ldmdavs	r5, {}	; <UNPREDICTABLE>
 860:	00000000 	andeq	r0, r0, r0
 864:	086a0406 	stmdaeq	sl!, {r1, r2, sl}^
 868:	04060000 	streq	r0, [r6], #-0
 86c:	00000859 	andeq	r0, r0, r9, asr r8
 870:	0005fe0b 	andeq	pc, r5, fp, lsl #28
 874:	00088000 	andeq	r8, r8, r0
 878:	006f0c00 	rsbeq	r0, pc, r0, lsl #24
 87c:	00020000 	andeq	r0, r2, r0
 880:	0006141f 	andeq	r1, r6, pc, lsl r4
 884:	03070600 	movweq	r0, #30208	; 0x7600
 888:	00000421 	andeq	r0, r0, r1, lsr #8
 88c:	00060d1f 	andeq	r0, r6, pc, lsl sp
 890:	03080600 	movweq	r0, #34304	; 0x8600
 894:	00000427 	andeq	r0, r0, r7, lsr #8
 898:	00008e03 	andeq	r8, r0, r3, lsl #28
 89c:	2c180700 	ldccs	7, cr0, [r8], {-0}
 8a0:	0f000000 	svceq	0x00000000
 8a4:	00000688 	andeq	r0, r0, r8, lsl #13
 8a8:	c42f0102 	strtgt	r0, [pc], #-258	; 8b0 <startup-0x1ffff750>
 8ac:	10000008 	andne	r0, r0, r8
 8b0:	30010078 	andcc	r0, r1, r8, ror r0
 8b4:	00000037 	andeq	r0, r0, r7, lsr r0
 8b8:	00791000 	rsbseq	r1, r9, r0
 8bc:	00373101 	eorseq	r3, r7, r1, lsl #2
 8c0:	00010000 	andeq	r0, r1, r0
 8c4:	0001e703 	andeq	lr, r1, r3, lsl #14
 8c8:	a3320100 	teqge	r2, #0, 2
 8cc:	0f000008 	svceq	0x00000008
 8d0:	00000063 	andeq	r0, r0, r3, rrx
 8d4:	0b350134 	bleq	d40dac <startup-0x1f2bf254>
 8d8:	0e000009 	cdpeq	0, 0, cr0, cr0, cr9, {0}
 8dc:	00000324 	andeq	r0, r0, r4, lsr #6
 8e0:	00683601 	rsbeq	r3, r8, r1, lsl #12
 8e4:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 8e8:	0000062d 	andeq	r0, r0, sp, lsr #12
 8ec:	00683701 	rsbeq	r3, r8, r1, lsl #14
 8f0:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
 8f4:	00000633 	andeq	r0, r0, r3, lsr r6
 8f8:	00683801 	rsbeq	r3, r8, r1, lsl #16
 8fc:	10080000 	andne	r0, r8, r0
 900:	01007870 	tsteq	r0, r0, ror r8
 904:	00090b39 	andeq	r0, r9, r9, lsr fp
 908:	0b000c00 	bleq	3910 <startup-0x1fffc6f0>
 90c:	000008c4 	andeq	r0, r0, r4, asr #17
 910:	0000091b 	andeq	r0, r0, fp, lsl r9
 914:	00006f0c 	andeq	r6, r0, ip, lsl #30
 918:	03001300 	movweq	r1, #768	; 0x300
 91c:	000003ed 	andeq	r0, r0, sp, ror #7
 920:	08cf3a01 	stmiaeq	pc, {r0, r9, fp, ip, sp}^	; <UNPREDICTABLE>
 924:	ec030000 	stc	0, cr0, [r3], {-0}
 928:	01000003 	tsteq	r0, r3
 92c:	0009313a 	andeq	r3, r9, sl, lsr r1
 930:	cf040600 	svcgt	0x00040600
 934:	0f000008 	svceq	0x00000008
 938:	00000586 	andeq	r0, r0, r6, lsl #11
 93c:	b03d0124 	eorslt	r0, sp, r4, lsr #2
 940:	10000009 	andne	r0, r0, r9
 944:	006f6567 	rsbeq	r6, pc, r7, ror #10
 948:	09263e01 	stmdbeq	r6!, {r0, r9, sl, fp, ip, sp}
 94c:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
 950:	00000466 	andeq	r0, r0, r6, ror #8
 954:	00683f01 	rsbeq	r3, r8, r1, lsl #30
 958:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
 95c:	0000046b 	andeq	r0, r0, fp, ror #8
 960:	00683f01 	rsbeq	r3, r8, r1, lsl #30
 964:	0e080000 	cdpeq	0, 0, cr0, cr8, cr0, {0}
 968:	0000028a 	andeq	r0, r0, sl, lsl #5
 96c:	00684001 	rsbeq	r4, r8, r1
 970:	0e0c0000 	cdpeq	0, 0, cr0, cr12, cr0, {0}
 974:	0000028f 	andeq	r0, r0, pc, lsl #5
 978:	00684001 	rsbeq	r4, r8, r1
 97c:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
 980:	00000608 	andeq	r0, r0, r8, lsl #12
 984:	09c14101 	stmibeq	r1, {r0, r8, lr}^
 988:	0e140000 	cdpeq	0, 1, cr0, cr4, cr0, {0}
 98c:	000000a7 	andeq	r0, r0, r7, lsr #1
 990:	09c14201 	stmibeq	r1, {r0, r9, lr}^
 994:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
 998:	00000131 	andeq	r0, r0, r1, lsr r1
 99c:	09c14301 	stmibeq	r1, {r0, r8, r9, lr}^
 9a0:	0e1c0000 	cdpeq	0, 1, cr0, cr12, cr0, {0}
 9a4:	000000f1 	strdeq	r0, [r0], -r1
 9a8:	09dc4401 	ldmibeq	ip, {r0, sl, lr}^
 9ac:	00200000 	eoreq	r0, r0, r0
 9b0:	0009bb1e 	andeq	fp, r9, lr, lsl fp
 9b4:	09bb1500 	ldmibeq	fp!, {r8, sl, ip}
 9b8:	06000000 	streq	r0, [r0], -r0
 9bc:	00093704 	andeq	r3, r9, r4, lsl #14
 9c0:	b0040600 	andlt	r0, r4, r0, lsl #12
 9c4:	1e000009 	cdpne	0, 0, cr0, cr0, cr9, {0}
 9c8:	000009dc 	ldrdeq	r0, [r0], -ip
 9cc:	0009bb15 	andeq	fp, r9, r5, lsl fp
 9d0:	00681500 	rsbeq	r1, r8, r0, lsl #10
 9d4:	68150000 	ldmdavs	r5, {}	; <UNPREDICTABLE>
 9d8:	00000000 	andeq	r0, r0, r0
 9dc:	09c70406 	stmibeq	r7, {r1, r2, sl}^
 9e0:	cc030000 	stcgt	0, cr0, [r3], {-0}
 9e4:	01000003 	tsteq	r0, r3
 9e8:	0009bb45 	andeq	fp, r9, r5, asr #22
 9ec:	04ef2000 	strbteq	r2, [pc], #0	; 9f4 <startup-0x1ffff60c>
 9f0:	47010000 	strmi	r0, [r1, -r0]
 9f4:	0000091b 	andeq	r0, r0, fp, lsl r9
 9f8:	083c0305 	ldmdaeq	ip!, {r0, r2, r8, r9}
 9fc:	f3212000 	vhadd.u32	d2, d1, d0
 a00:	01000006 	tsteq	r0, r6
 a04:	07840186 	streq	r0, [r4, r6, lsl #3]
 a08:	00b82000 	adcseq	r2, r8, r0
 a0c:	9c010000 	stcls	0, cr0, [r1], {-0}
 a10:	00000a7d 	andeq	r0, r0, sp, ror sl
 a14:	0007aa22 	andeq	sl, r7, r2, lsr #20
 a18:	00002020 	andeq	r2, r0, r0, lsr #32
 a1c:	000a2f00 	andeq	r2, sl, r0, lsl #30
 a20:	00692300 	rsbeq	r2, r9, r0, lsl #6
 a24:	68019401 	stmdavs	r1, {r0, sl, ip, pc}
 a28:	02000000 	andeq	r0, r0, #0
 a2c:	22007491 	andcs	r7, r0, #-1862270976	; 0x91000000
 a30:	200007ca 	andcs	r0, r0, sl, asr #15
 a34:	00000020 	andeq	r0, r0, r0, lsr #32
 a38:	00000a4a 	andeq	r0, r0, sl, asr #20
 a3c:	01006923 	tsteq	r0, r3, lsr #18
 a40:	00680198 	mlseq	r8, r8, r1, r0
 a44:	91020000 	mrsls	r0, (UNDEF: 2)
 a48:	f4220070 	vld4.16	{d0-d3}, [r2 :256], r0
 a4c:	20200007 	eorcs	r0, r0, r7
 a50:	65000000 	strvs	r0, [r0, #-0]
 a54:	2300000a 	movwcs	r0, #10
 a58:	9e010069 	cdpls	0, 0, cr0, cr1, cr9, {3}
 a5c:	00006801 	andeq	r6, r0, r1, lsl #16
 a60:	6c910200 	lfmvs	f0, 4, [r1], {0}
 a64:	08142400 	ldmdaeq	r4, {sl, sp}
 a68:	00202000 	eoreq	r2, r0, r0
 a6c:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
 a70:	01a20100 			; <UNDEFINED> instruction: 0x01a20100
 a74:	00000068 	andeq	r0, r0, r8, rrx
 a78:	00689102 	rsbeq	r9, r8, r2, lsl #2
 a7c:	01ba2100 			; <UNDEFINED> instruction: 0x01ba2100
 a80:	76010000 	strvc	r0, [r1], -r0
 a84:	00070401 	andeq	r0, r7, r1, lsl #8
 a88:	00008020 	andeq	r8, r0, r0, lsr #32
 a8c:	a39c0100 	orrsge	r0, ip, #0, 2
 a90:	2500000a 	strcs	r0, [r0, #-10]
 a94:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
 a98:	e2017601 	and	r7, r1, #1048576	; 0x100000
 a9c:	02000009 	andeq	r0, r0, #9
 aa0:	21007491 			; <UNDEFINED> instruction: 0x21007491
 aa4:	000000ad 	andeq	r0, r0, sp, lsr #1
 aa8:	a0016f01 	andge	r6, r1, r1, lsl #30
 aac:	64200006 	strtvs	r0, [r0], #-6
 ab0:	01000000 	mrseq	r0, (UNDEF: 0)
 ab4:	000ade9c 	muleq	sl, ip, lr
 ab8:	006f2600 	rsbeq	r2, pc, r0, lsl #12
 abc:	e2016f01 	and	r6, r1, #1, 30
 ac0:	02000009 	andeq	r0, r0, #9
 ac4:	a8246c91 	stmdage	r4!, {r0, r4, r7, sl, fp, sp, lr}
 ac8:	54200006 	strtpl	r0, [r0], #-6
 acc:	23000000 	movwcs	r0, #0
 ad0:	70010069 	andvc	r0, r1, r9, rrx
 ad4:	00006801 	andeq	r6, r0, r1, lsl #16
 ad8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 adc:	4b210000 	blmi	840ae4 <startup-0x1f7bf51c>
 ae0:	01000002 	tsteq	r0, r2
 ae4:	063c0169 	ldrteq	r0, [ip], -r9, ror #2
 ae8:	00642000 	rsbeq	r2, r4, r0
 aec:	9c010000 	stcls	0, cr0, [r1], {-0}
 af0:	00000b19 	andeq	r0, r0, r9, lsl fp
 af4:	01006f26 	tsteq	r0, r6, lsr #30
 af8:	09e20169 	stmibeq	r2!, {r0, r3, r5, r6, r8}^
 afc:	91020000 	mrsls	r0, (UNDEF: 2)
 b00:	0644246c 	strbeq	r2, [r4], -ip, ror #8
 b04:	00542000 	subseq	r2, r4, r0
 b08:	69230000 	stmdbvs	r3!, {}	; <UNPREDICTABLE>
 b0c:	016a0100 	cmneq	sl, r0, lsl #2
 b10:	00000068 	andeq	r0, r0, r8, rrx
 b14:	00749102 	rsbseq	r9, r4, r2, lsl #2
 b18:	05ae2700 	streq	r2, [lr, #1792]!	; 0x700
 b1c:	64010000 	strvs	r0, [r1], #-0
 b20:	00061c01 	andeq	r1, r6, r1, lsl #24
 b24:	00002020 	andeq	r2, r0, r0, lsr #32
 b28:	5b9c0100 	blpl	fe700f30 <ball_geometry+0xde7006f4>
 b2c:	2600000b 	strcs	r0, [r0], -fp
 b30:	6401006f 	strvs	r0, [r1], #-111	; 0xffffff91
 b34:	0009e201 	andeq	lr, r9, r1, lsl #4
 b38:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b3c:	00026625 	andeq	r6, r2, r5, lsr #12
 b40:	01640100 	cmneq	r4, r0, lsl #2
 b44:	00000068 	andeq	r0, r0, r8, rrx
 b48:	25709102 	ldrbcs	r9, [r0, #-258]!	; 0xfffffefe
 b4c:	0000004e 	andeq	r0, r0, lr, asr #32
 b50:	68016401 	stmdavs	r1, {r0, sl, sp, lr}
 b54:	02000000 	andeq	r0, r0, #0
 b58:	21006c91 			; <UNDEFINED> instruction: 0x21006c91
 b5c:	0000032e 	andeq	r0, r0, lr, lsr #6
 b60:	4c012301 	stcmi	3, cr2, [r1], {1}
 b64:	d0200004 	eorle	r0, r0, r4
 b68:	01000001 	tsteq	r0, r1
 b6c:	000be69c 	muleq	fp, ip, r6
 b70:	00782600 	rsbseq	r2, r8, r0, lsl #12
 b74:	37012301 	strcc	r2, [r1, -r1, lsl #6]
 b78:	02000000 	andeq	r0, r0, #0
 b7c:	79265f91 	stmdbvc	r6!, {r0, r4, r7, r8, r9, sl, fp, ip, lr}
 b80:	01230100 			; <UNDEFINED> instruction: 0x01230100
 b84:	00000037 	andeq	r0, r0, r7, lsr r0
 b88:	265e9102 	ldrbcs	r9, [lr], -r2, lsl #2
 b8c:	00746573 	rsbseq	r6, r4, r3, ror r5
 b90:	37012301 	strcc	r2, [r1, -r1, lsl #6]
 b94:	02000000 	andeq	r0, r0, #0
 b98:	9f285d91 	svcls	0x00285d91
 b9c:	01000005 	tsteq	r0, r5
 ba0:	00370128 	eorseq	r0, r7, r8, lsr #2
 ba4:	91020000 	mrsls	r0, (UNDEF: 2)
 ba8:	04272864 	strteq	r2, [r7], #-2148	; 0xfffff79c
 bac:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 bb0:	00003701 	andeq	r3, r0, r1, lsl #14
 bb4:	67910200 	ldrvs	r0, [r1, r0, lsl #4]
 bb8:	00019228 	andeq	r9, r1, r8, lsr #4
 bbc:	012a0100 			; <UNDEFINED> instruction: 0x012a0100
 bc0:	00000037 	andeq	r0, r0, r7, lsr r0
 bc4:	28669102 	stmdacs	r6!, {r1, r8, ip, pc}^
 bc8:	00000408 	andeq	r0, r0, r8, lsl #8
 bcc:	37012b01 	strcc	r2, [r1, -r1, lsl #22]
 bd0:	02000000 	andeq	r0, r0, #0
 bd4:	86286591 			; <UNDEFINED> instruction: 0x86286591
 bd8:	01000001 	tsteq	r0, r1
 bdc:	00370156 	eorseq	r0, r7, r6, asr r1
 be0:	91020000 	mrsls	r0, (UNDEF: 2)
 be4:	ac210063 	stcge	0, cr0, [r1], #-396	; 0xfffffe74
 be8:	01000004 	tsteq	r0, r4
 bec:	03f40118 	mvnseq	r0, #24, 2
 bf0:	00582000 	subseq	r2, r8, r0
 bf4:	9c010000 	stcls	0, cr0, [r1], {-0}
 bf8:	00000c2b 	andeq	r0, r0, fp, lsr #24
 bfc:	0003fa24 	andeq	pc, r3, r4, lsr #20
 c00:	00004a20 	andeq	r4, r0, r0, lsr #20
 c04:	00692300 	rsbeq	r2, r9, r0, lsl #6
 c08:	68011901 	stmdavs	r1, {r0, r8, fp, ip}
 c0c:	02000000 	andeq	r0, r0, #0
 c10:	1e247491 	mcrne	4, 1, r7, cr4, cr1, {4}
 c14:	1a200004 	bne	800c2c <startup-0x1f7ff3d4>
 c18:	23000000 	movwcs	r0, #0
 c1c:	1c010077 	stcne	0, cr0, [r1], {119}	; 0x77
 c20:	00006801 	andeq	r6, r0, r1, lsl #16
 c24:	70910200 	addsvc	r0, r1, r0, lsl #4
 c28:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
 c2c:	0000010f 	andeq	r0, r0, pc, lsl #2
 c30:	a4010901 	strge	r0, [r1], #-2305	; 0xfffff6ff
 c34:	50200003 	eorpl	r0, r0, r3
 c38:	01000000 	mrseq	r0, (UNDEF: 0)
 c3c:	05a52a9c 	streq	r2, [r5, #2716]!	; 0xa9c
 c40:	05010000 	streq	r0, [r1, #-0]
 c44:	00038a01 	andeq	r8, r3, r1, lsl #20
 c48:	00001a20 	andeq	r1, r0, r0, lsr #20
 c4c:	2b9c0100 	blcs	fe701054 <ball_geometry+0xde700818>
 c50:	00000470 	andeq	r0, r0, r0, ror r4
 c54:	0037fe01 	eorseq	pc, r7, r1, lsl #28
 c58:	03600000 	cmneq	r0, #0
 c5c:	002a2000 	eoreq	r2, sl, r0
 c60:	9c010000 	stcls	0, cr0, [r1], {-0}
 c64:	00000c77 	andeq	r0, r0, r7, ror ip
 c68:	0001922c 	andeq	r9, r1, ip, lsr #4
 c6c:	37fe0100 	ldrbcc	r0, [lr, r0, lsl #2]!
 c70:	02000000 	andeq	r0, r0, #0
 c74:	2d007791 	stccs	7, cr7, [r0, #-580]	; 0xfffffdbc
 c78:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 c7c:	031af601 	tsteq	sl, #1048576	; 0x100000	; <UNPREDICTABLE>
 c80:	00462000 	subeq	r2, r6, r0
 c84:	9c010000 	stcls	0, cr0, [r1], {-0}
 c88:	00000ca9 	andeq	r0, r0, r9, lsr #25
 c8c:	00047d2c 	andeq	r7, r4, ip, lsr #26
 c90:	98f60100 	ldmls	r6!, {r8}^
 c94:	02000008 	andeq	r0, r0, #8
 c98:	922c7791 	eorls	r7, ip, #38010880	; 0x2440000
 c9c:	01000001 	tsteq	r0, r1
 ca0:	000898f6 	strdeq	r9, [r8], -r6
 ca4:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 ca8:	044b2d00 	strbeq	r2, [fp], #-3328	; 0xfffff300
 cac:	ee010000 	cdp	0, 0, cr0, cr1, cr0, {0}
 cb0:	200002d4 	ldrdcs	r0, [r0], -r4
 cb4:	00000046 	andeq	r0, r0, r6, asr #32
 cb8:	0cdb9c01 	ldcleq	12, cr9, [fp], {1}
 cbc:	592c0000 	stmdbpl	ip!, {}	; <UNPREDICTABLE>
 cc0:	01000004 	tsteq	r0, r4
 cc4:	000898ee 	andeq	r9, r8, lr, ror #17
 cc8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 ccc:	0001922c 	andeq	r9, r1, ip, lsr #4
 cd0:	98ee0100 	stmials	lr!, {r8}^
 cd4:	02000008 	andeq	r0, r0, #8
 cd8:	2d007691 	stccs	6, cr7, [r0, #-580]	; 0xfffffdbc
 cdc:	00000055 	andeq	r0, r0, r5, asr r0
 ce0:	0254d801 	subseq	sp, r4, #65536	; 0x10000
 ce4:	00802000 	addeq	r2, r0, r0
 ce8:	9c010000 	stcls	0, cr0, [r1], {-0}
 cec:	00000d0d 	andeq	r0, r0, sp, lsl #26
 cf0:	00057a2c 	andeq	r7, r5, ip, lsr #20
 cf4:	37d80100 	ldrbcc	r0, [r8, r0, lsl #2]
 cf8:	02000000 	andeq	r0, r0, #0
 cfc:	922c7791 	eorls	r7, ip, #38010880	; 0x2440000
 d00:	01000001 	tsteq	r0, r1
 d04:	000037d8 	ldrdeq	r3, [r0], -r8
 d08:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 d0c:	02a72b00 	adceq	r2, r7, #0, 22
 d10:	bf010000 	svclt	0x00010000
 d14:	00000037 	andeq	r0, r0, r7, lsr r0
 d18:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 d1c:	00000098 	muleq	r0, r8, r0
 d20:	0d429c01 	stcleq	12, cr9, [r2, #-4]
 d24:	922c0000 	eorls	r0, ip, #0
 d28:	01000001 	tsteq	r0, r1
 d2c:	000037bf 			; <UNDEFINED> instruction: 0x000037bf
 d30:	6f910200 	svcvs	0x00910200
 d34:	0056522e 	subseq	r5, r6, lr, lsr #4
 d38:	0037c901 	eorseq	ip, r7, r1, lsl #18
 d3c:	91020000 	mrsls	r0, (UNDEF: 2)
 d40:	f52f0077 			; <UNDEFINED> instruction: 0xf52f0077
 d44:	01000005 	tsteq	r0, r5
 d48:	000156aa 	andeq	r5, r1, sl, lsr #13
 d4c:	00006620 	andeq	r6, r0, r0, lsr #12
 d50:	2d9c0100 	ldfcss	f0, [ip]
 d54:	0000018b 	andeq	r0, r0, fp, lsl #3
 d58:	00f89101 	rscseq	r9, r8, r1, lsl #2
 d5c:	005e2000 	subseq	r2, lr, r0
 d60:	9c010000 	stcls	0, cr0, [r1], {-0}
 d64:	00000d77 	andeq	r0, r0, r7, ror sp
 d68:	0001922c 	andeq	r9, r1, ip, lsr #4
 d6c:	98910100 	ldmls	r1, {r8}
 d70:	02000008 	andeq	r0, r0, #8
 d74:	30007791 	mulcc	r0, r1, r7
 d78:	00000096 	muleq	r0, r6, r0
 d7c:	00c48b01 	sbceq	r8, r4, r1, lsl #22
 d80:	00342000 	eorseq	r2, r4, r0
 d84:	9c010000 	stcls	0, cr0, [r1], {-0}
 d88:	00000d99 	muleq	r0, r9, sp
 d8c:	01007831 	tsteq	r0, r1, lsr r8
 d90:	0008988b 	andeq	r9, r8, fp, lsl #17
 d94:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 d98:	05143000 	ldreq	r3, [r4, #-0]
 d9c:	85010000 	strhi	r0, [r1, #-0]
 da0:	2000008e 	andcs	r0, r0, lr, lsl #1
 da4:	00000036 	andeq	r0, r0, r6, lsr r0
 da8:	0dbb9c01 	ldceq	12, cr9, [fp, #4]!
 dac:	78310000 	ldmdavc	r1!, {}	; <UNPREDICTABLE>
 db0:	98850100 	stmls	r5, {r8}
 db4:	02000008 	andeq	r0, r0, #8
 db8:	2d007791 	stccs	7, cr7, [r0, #-580]	; 0xfffffdbc
 dbc:	000006f8 	strdeq	r0, [r0], -r8
 dc0:	00667c01 	rsbeq	r7, r6, r1, lsl #24
 dc4:	00282000 	eoreq	r2, r8, r0
 dc8:	9c010000 	stcls	0, cr0, [r1], {-0}
 dcc:	00000deb 	andeq	r0, r0, fp, ror #27
 dd0:	00736d31 	rsbseq	r6, r3, r1, lsr sp
 dd4:	006f7c01 	rsbeq	r7, pc, r1, lsl #24
 dd8:	91020000 	mrsls	r0, (UNDEF: 2)
 ddc:	73752e6c 	cmnvc	r5, #108, 28	; 0x6c0
 de0:	6f7d0100 	svcvs	0x007d0100
 de4:	02000000 	andeq	r0, r0, #0
 de8:	2d007491 	cfstrscs	mvf7, [r0, #-580]	; 0xfffffdbc
 dec:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
 df0:	002c7401 	eoreq	r7, ip, r1, lsl #8
 df4:	003a2000 	eorseq	r2, sl, r0
 df8:	9c010000 	stcls	0, cr0, [r1], {-0}
 dfc:	00000e3a 	andeq	r0, r0, sl, lsr lr
 e00:	00737531 	rsbseq	r7, r3, r1, lsr r5
 e04:	006f7401 	rsbeq	r7, pc, r1, lsl #8
 e08:	91020000 	mrsls	r0, (UNDEF: 2)
 e0c:	0034246c 	eorseq	r2, r4, ip, ror #8
 e10:	002a2000 	eoreq	r2, sl, r0
 e14:	692e0000 	stmdbvs	lr!, {}	; <UNPREDICTABLE>
 e18:	68750100 	ldmdavs	r5!, {r8}^
 e1c:	02000000 	andeq	r0, r0, #0
 e20:	3a247491 	bcc	91e06c <startup-0x1f6e1f94>
 e24:	16200000 	strtne	r0, [r0], -r0
 e28:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
 e2c:	76010077 			; <UNDEFINED> instruction: 0x76010077
 e30:	00000068 	andeq	r0, r0, r8, rrx
 e34:	00709102 	rsbseq	r9, r0, r2, lsl #2
 e38:	1b2f0000 	blne	bc0e40 <startup-0x1f43f1c0>
 e3c:	01000004 	tsteq	r0, r4
 e40:	00001a6d 	andeq	r1, r0, sp, ror #20
 e44:	00001220 	andeq	r1, r0, r0, lsr #4
 e48:	329c0100 	addscc	r0, ip, #0, 2
 e4c:	00000080 	andeq	r0, r0, r0, lsl #1
 e50:	00106201 	andseq	r6, r0, r1, lsl #4
 e54:	000a2000 	andeq	r2, sl, r0
 e58:	9c010000 	stcls	0, cr0, [r1], {-0}
 e5c:	00027b32 	andeq	r7, r2, r2, lsr fp
 e60:	00570100 	subseq	r0, r7, r0, lsl #2
 e64:	0c200000 	stceq	0, cr0, [r0], #-0
 e68:	01000000 	mrseq	r0, (UNDEF: 0)
 e6c:	Address 0x00000e6c is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	0f050000 	svceq	0x00050000
  38:	000b0b00 	andeq	r0, fp, r0, lsl #22
  3c:	000f0600 	andeq	r0, pc, r0, lsl #12
  40:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  44:	13070000 	movwne	r0, #28672	; 0x7000
  48:	3c0e0300 	stccc	3, cr0, [lr], {-0}
  4c:	08000019 	stmdaeq	r0, {r0, r3, r4}
  50:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  54:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  58:	00001349 	andeq	r1, r0, r9, asr #6
  5c:	0b011709 	bleq	45c88 <startup-0x1ffba378>
  60:	3b0b3a0b 	blcc	2ce894 <startup-0x1fd3176c>
  64:	0013010b 	andseq	r0, r3, fp, lsl #2
  68:	000d0a00 	andeq	r0, sp, r0, lsl #20
  6c:	0b3a0e03 	bleq	e83880 <startup-0x1f17c780>
  70:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  74:	010b0000 	mrseq	r0, (UNDEF: 11)
  78:	01134901 	tsteq	r3, r1, lsl #18
  7c:	0c000013 	stceq	0, cr0, [r0], {19}
  80:	13490021 	movtne	r0, #36897	; 0x9021
  84:	00000b2f 	andeq	r0, r0, pc, lsr #22
  88:	0b01130d 	bleq	44cc4 <startup-0x1ffbb33c>
  8c:	3b0b3a0b 	blcc	2ce8c0 <startup-0x1fd31740>
  90:	0013010b 	andseq	r0, r3, fp, lsl #2
  94:	000d0e00 	andeq	r0, sp, r0, lsl #28
  98:	0b3a0e03 	bleq	e838ac <startup-0x1f17c754>
  9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a0:	00000b38 	andeq	r0, r0, r8, lsr fp
  a4:	0301130f 	movweq	r1, #4879	; 0x130f
  a8:	3a0b0b0e 	bcc	2c2ce8 <startup-0x1fd3d318>
  ac:	010b3b0b 	tsteq	fp, fp, lsl #22
  b0:	10000013 	andne	r0, r0, r3, lsl r0
  b4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  b8:	0b3b0b3a 	bleq	ec2da8 <startup-0x1f13d258>
  bc:	0b381349 	bleq	e04de8 <startup-0x1f1fb218>
  c0:	13110000 	tstne	r1, #0
  c4:	0b0e0301 	bleq	380cd0 <startup-0x1fc7f330>
  c8:	3b0b3a05 	blcc	2ce8e4 <startup-0x1fd3171c>
  cc:	0013010b 	andseq	r0, r3, fp, lsl #2
  d0:	000d1200 	andeq	r1, sp, r0, lsl #4
  d4:	0b3a0e03 	bleq	e838e8 <startup-0x1f17c718>
  d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  dc:	00000538 	andeq	r0, r0, r8, lsr r5
  e0:	27001513 	smladcs	r0, r3, r5, r1
  e4:	14000019 	strne	r0, [r0], #-25	; 0xffffffe7
  e8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  ec:	13011349 	movwne	r1, #4937	; 0x1349
  f0:	05150000 	ldreq	r0, [r5, #-0]
  f4:	00134900 	andseq	r4, r3, r0, lsl #18
  f8:	00261600 	eoreq	r1, r6, r0, lsl #12
  fc:	00001349 	andeq	r1, r0, r9, asr #6
 100:	03011317 	movweq	r1, #4887	; 0x1317
 104:	3a050b0e 	bcc	142d44 <startup-0x1febd2bc>
 108:	01053b0b 	tsteq	r5, fp, lsl #22
 10c:	18000013 	stmdane	r0, {r0, r1, r4}
 110:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 114:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 118:	0b381349 	bleq	e04e44 <startup-0x1f1fb1bc>
 11c:	0d190000 	ldceq	0, cr0, [r9, #-0]
 120:	3a0e0300 	bcc	380d28 <startup-0x1fc7f2d8>
 124:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 128:	00053813 	andeq	r3, r5, r3, lsl r8
 12c:	01131a00 	tsteq	r3, r0, lsl #20
 130:	0b0b0e03 	bleq	2c3944 <startup-0x1fd3c6bc>
 134:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 138:	00001301 	andeq	r1, r0, r1, lsl #6
 13c:	0b01131b 	bleq	44db0 <startup-0x1ffbb250>
 140:	3b0b3a0b 	blcc	2ce974 <startup-0x1fd3168c>
 144:	00130105 	andseq	r0, r3, r5, lsl #2
 148:	01171c00 	tsteq	r7, r0, lsl #24
 14c:	0b3a0b0b 	bleq	e82d80 <startup-0x1f17d280>
 150:	1301053b 	movwne	r0, #5435	; 0x153b
 154:	0d1d0000 	ldceq	0, cr0, [sp, #-0]
 158:	3a0e0300 	bcc	380d60 <startup-0x1fc7f2a0>
 15c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 160:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
 164:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
 168:	00001301 	andeq	r1, r0, r1, lsl #6
 16c:	0300341f 	movweq	r3, #1055	; 0x41f
 170:	3b0b3a0e 	blcc	2ce9b0 <startup-0x1fd31650>
 174:	3f134905 	svccc	0x00134905
 178:	00193c19 	andseq	r3, r9, r9, lsl ip
 17c:	00342000 	eorseq	r2, r4, r0
 180:	0b3a0e03 	bleq	e83994 <startup-0x1f17c66c>
 184:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 188:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 18c:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 190:	03193f01 	tsteq	r9, #1, 30
 194:	3b0b3a0e 	blcc	2ce9d4 <startup-0x1fd3162c>
 198:	11192705 	tstne	r9, r5, lsl #14
 19c:	40061201 	andmi	r1, r6, r1, lsl #4
 1a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1a4:	00001301 	andeq	r1, r0, r1, lsl #6
 1a8:	11010b22 	tstne	r1, r2, lsr #22
 1ac:	01061201 	tsteq	r6, r1, lsl #4
 1b0:	23000013 	movwcs	r0, #19
 1b4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1c0:	0b240000 	bleq	9001c8 <startup-0x1f6ffe38>
 1c4:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 1c8:	25000006 	strcs	r0, [r0, #-6]
 1cc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1d0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1d4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1d8:	05260000 	streq	r0, [r6, #-0]!
 1dc:	3a080300 	bcc	200de4 <startup-0x1fdff21c>
 1e0:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e4:	00180213 	andseq	r0, r8, r3, lsl r2
 1e8:	012e2700 			; <UNDEFINED> instruction: 0x012e2700
 1ec:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 1f0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 1f4:	01111927 	tsteq	r1, r7, lsr #18
 1f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1fc:	01194297 			; <UNDEFINED> instruction: 0x01194297
 200:	28000013 	stmdacs	r0, {r0, r1, r4}
 204:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 208:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 20c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 210:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 214:	03193f00 	tsteq	r9, #0, 30
 218:	3b0b3a0e 	blcc	2cea58 <startup-0x1fd315a8>
 21c:	11192705 	tstne	r9, r5, lsl #14
 220:	40061201 	andmi	r1, r6, r1, lsl #4
 224:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 228:	2e2a0000 	cdpcs	0, 2, cr0, cr10, cr0, {0}
 22c:	03193f00 	tsteq	r9, #0, 30
 230:	3b0b3a0e 	blcc	2cea70 <startup-0x1fd31590>
 234:	11192705 	tstne	r9, r5, lsl #14
 238:	40061201 	andmi	r1, r6, r1, lsl #4
 23c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 240:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
 244:	03193f01 	tsteq	r9, #1, 30
 248:	3b0b3a0e 	blcc	2cea88 <startup-0x1fd31578>
 24c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 250:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 254:	96184006 	ldrls	r4, [r8], -r6
 258:	13011942 	movwne	r1, #6466	; 0x1942
 25c:	052c0000 	streq	r0, [ip, #-0]!
 260:	3a0e0300 	bcc	380e68 <startup-0x1fc7f198>
 264:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 268:	00180213 	andseq	r0, r8, r3, lsl r2
 26c:	012e2d00 			; <UNDEFINED> instruction: 0x012e2d00
 270:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 274:	0b3b0b3a 	bleq	ec2f64 <startup-0x1f13d09c>
 278:	01111927 	tsteq	r1, r7, lsr #18
 27c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 280:	01194296 			; <UNDEFINED> instruction: 0x01194296
 284:	2e000013 	mcrcs	0, 0, r0, cr0, cr3, {0}
 288:	08030034 	stmdaeq	r3, {r2, r4, r5}
 28c:	0b3b0b3a 	bleq	ec2f7c <startup-0x1f13d084>
 290:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 294:	2e2f0000 	cdpcs	0, 2, cr0, cr15, cr0, {0}
 298:	03193f00 	tsteq	r9, #0, 30
 29c:	3b0b3a0e 	blcc	2ceadc <startup-0x1fd31524>
 2a0:	1119270b 	tstne	r9, fp, lsl #14
 2a4:	40061201 	andmi	r1, r6, r1, lsl #4
 2a8:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2ac:	2e300000 	cdpcs	0, 3, cr0, cr0, cr0, {0}
 2b0:	03193f01 	tsteq	r9, #1, 30
 2b4:	3b0b3a0e 	blcc	2ceaf4 <startup-0x1fd3150c>
 2b8:	1119270b 	tstne	r9, fp, lsl #14
 2bc:	40061201 	andmi	r1, r6, r1, lsl #4
 2c0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 2c4:	00001301 	andeq	r1, r0, r1, lsl #6
 2c8:	03000531 	movweq	r0, #1329	; 0x531
 2cc:	3b0b3a08 	blcc	2ceaf4 <startup-0x1fd3150c>
 2d0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2d4:	32000018 	andcc	r0, r0, #24
 2d8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2dc:	0b3a0e03 	bleq	e83af0 <startup-0x1f17c510>
 2e0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2e4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2e8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2ec:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	0000082c 	andeq	r0, r0, ip, lsr #16
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	2000083c 	andcs	r0, r0, ip, lsr r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000031a 	andeq	r0, r0, sl, lsl r3
   4:	01650002 	cmneq	r5, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e696568 	cdpvs	5, 6, cr6, cr9, cr8, {3}
  28:	6f442f6c 	svcvs	0x00442f6c
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	6c706f4d 	ldclvs	15, cr6, [r0], #-308	; 0xfffffecc
  38:	726f6261 	rsbvc	r6, pc, #268435462	; 0x10000006
  3c:	6f697461 	svcvs	0x00697461
  40:	2f72656e 	svccs	0x0072656e
  44:	70617267 	rsbvc	r7, r1, r7, ror #4
  48:	64636968 	strbtvs	r6, [r3], #-2408	; 0xfffff698
  4c:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  50:	63007961 	movwvs	r7, #2401	; 0x961
  54:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
  58:	70706165 	rsbsvc	r6, r0, r5, ror #2
  5c:	646f635c 	strbtvs	r6, [pc], #-860	; 64 <startup-0x1fffff9c>
  60:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
  64:	6f745c65 	svcvs	0x00745c65
  68:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
  6c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
  70:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
  74:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  78:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
  7c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
  80:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
  84:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
  88:	616d5c65 	cmnvs	sp, r5, ror #24
  8c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
  90:	3a630065 	bcc	18c022c <startup-0x1e73fdd4>
  94:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
  98:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
  9c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
  a0:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
  a4:	6f6f745c 	svcvs	0x006f745c
  a8:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
  ac:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
  b0:	615c6d72 	cmpvs	ip, r2, ror sp
  b4:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
  b8:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
  bc:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
  c0:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
  c4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
  c8:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
  cc:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  d0:	61657363 	cmnvs	r5, r3, ror #6
  d4:	635c7070 	cmpvs	ip, #112	; 0x70
  d8:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  dc:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  e0:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; ffffff18 <ball_geometry+0xdffff6dc>
  e4:	63675c73 	cmnvs	r7, #29440	; 0x7300
  e8:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  ec:	696c5c6d 	stmdbvs	ip!, {r0, r2, r3, r5, r6, sl, fp, ip, lr}^
  f0:	63675c62 	cmnvs	r7, #25088	; 0x6200
  f4:	72615c63 	rsbvc	r5, r1, #25344	; 0x6300
  f8:	6f6e2d6d 	svcvs	0x006e2d6d
  fc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 100:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 104:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
 108:	6e695c31 	mcrvs	12, 3, r5, cr9, cr1, {1}
 10c:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 110:	73000065 	movwvc	r0, #101	; 0x65
 114:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 118:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 11c:	00000100 	andeq	r0, r0, r0, lsl #2
 120:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 124:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 128:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 12c:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 130:	00000200 	andeq	r0, r0, r0, lsl #4
 134:	6b636f6c 	blvs	18dbeec <startup-0x1e724114>
 138:	0300682e 	movweq	r6, #2094	; 0x82e
 13c:	745f0000 	ldrbvc	r0, [pc], #-0	; 144 <startup-0x1ffffebc>
 140:	73657079 	cmnvc	r5, #121	; 0x79
 144:	0300682e 	movweq	r6, #2094	; 0x82e
 148:	74730000 	ldrbtvc	r0, [r3], #-0
 14c:	66656464 	strbtvs	r6, [r5], -r4, ror #8
 150:	0400682e 	streq	r6, [r0], #-2094	; 0xfffff7d2
 154:	65720000 	ldrbvs	r0, [r2, #-0]!
 158:	2e746e65 	cdpcs	14, 7, cr6, cr4, cr5, {3}
 15c:	00030068 	andeq	r0, r3, r8, rrx
 160:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 164:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
 168:	0300682e 	movweq	r6, #2094	; 0x82e
 16c:	00000000 	andeq	r0, r0, r0
 170:	00000205 	andeq	r0, r0, r5, lsl #4
 174:	d6032000 	strle	r2, [r3], -r0
 178:	5e130100 	mufpls	f0, f3, f0
 17c:	01000302 	tsteq	r0, r2, lsl #6
 180:	02050001 	andeq	r0, r5, #1
 184:	20000010 	andcs	r0, r0, r0, lsl r0
 188:	0100e103 	tsteq	r0, r3, lsl #2
 18c:	3e2e0903 	vmulcc.f16	s0, s28, s6	; <UNPREDICTABLE>
 190:	402f2f2f 	eormi	r2, pc, pc, lsr #30
 194:	02003d4b 	andeq	r3, r0, #4800	; 0x12c0
 198:	003d0304 	eorseq	r0, sp, r4, lsl #6
 19c:	2d030402 	cfstrscs	mvf0, [r3, #-8]
 1a0:	01040200 	mrseq	r0, R12_usr
 1a4:	02003c06 	andeq	r3, r0, #1536	; 0x600
 1a8:	3b060204 	blcc	1809c0 <startup-0x1fe7f640>
 1ac:	01040200 	mrseq	r0, R12_usr
 1b0:	4f063c06 	svcmi	0x00063c06
 1b4:	4b834b4c 	blmi	fe0d2eec <ball_geometry+0xde0d26b0>
 1b8:	6ae56750 	bvs	ff959f00 <ball_geometry+0xdf9596c4>
 1bc:	676ad767 	strbvs	sp, [sl, -r7, ror #14]!
 1c0:	3d223dca 	stccc	13, cr3, [r2, #-808]!	; 0xfffffcd8
 1c4:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
 1c8:	513e3e22 	teqpl	lr, r2, lsr #28
 1cc:	3d3d3e2f 	ldccc	14, cr3, [sp, #-188]!	; 0xffffff44
 1d0:	3d21303d 	stccc	0, cr3, [r1, #-244]!	; 0xffffff0c
 1d4:	6d2a3d2f 	stcvs	13, cr3, [sl, #-188]!	; 0xffffff44
 1d8:	67be3d3d 			; <UNDEFINED> instruction: 0x67be3d3d
 1dc:	3d3d3d3e 	ldccc	13, cr3, [sp, #-248]!	; 0xffffff08
 1e0:	2f3d2f59 	svccs	0x003d2f59
 1e4:	4b3e3d59 	blmi	f8f750 <startup-0x1f0708b0>
 1e8:	3d4b3d3d 	stclcc	13, cr3, [fp, #-244]	; 0xffffff0c
 1ec:	91cb3d30 	bicls	r3, fp, r0, lsr sp
 1f0:	3d2f594b 			; <UNDEFINED> instruction: 0x3d2f594b
 1f4:	3d593e2f 	ldclcc	14, cr3, [r9, #-188]	; 0xffffff44
 1f8:	313d593d 	teqcc	sp, sp, lsr r9
 1fc:	693d3d3d 	ldmdbvs	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
 200:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 204:	914c833d 	cmpls	ip, sp, lsr r3
 208:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 20c:	59674c83 	stmdbpl	r7!, {r0, r1, r7, sl, fp, lr}^
 210:	3d2f4e67 	stccc	14, cr4, [pc, #-412]!	; 7c <startup-0x1fffff84>
 214:	3d3d2f84 	ldccc	15, cr2, [sp, #-528]!	; 0xfffffdf0
 218:	4b4b3d3e 	blmi	12cf718 <startup-0x1ed308e8>
 21c:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
 220:	ad3d3d3f 	ldcge	13, cr3, [sp, #-252]!	; 0xffffff04
 224:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 228:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 22c:	00490304 	subeq	r0, r9, r4, lsl #6
 230:	06010402 	streq	r0, [r1], -r2, lsl #8
 234:	0402003c 	streq	r0, [r2], #-60	; 0xffffffc4
 238:	00390602 	eorseq	r0, r9, r2, lsl #12
 23c:	06010402 	streq	r0, [r1], -r2, lsl #8
 240:	4d43063c 	stclmi	6, cr0, [r3, #-240]	; 0xffffff10
 244:	040200e5 	streq	r0, [r2], #-229	; 0xffffff1b
 248:	00580601 	subseq	r0, r8, r1, lsl #12
 24c:	58020402 	stmdapl	r2, {r1, sl}
 250:	03040200 	movweq	r0, #16896	; 0x4200
 254:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 258:	5c065804 	stcpl	8, cr5, [r6], {4}
 25c:	4b2208b1 	blmi	882528 <startup-0x1f77dad8>
 260:	4b224b22 	blmi	892ef0 <startup-0x1f76d110>
 264:	4b224b22 	blmi	892ef4 <startup-0x1f76d10c>
 268:	4b224b22 	blmi	892ef8 <startup-0x1f76d108>
 26c:	4b234b22 	blmi	8d2efc <startup-0x1f72d104>
 270:	764b4b69 	strbvc	r4, [fp], -r9, ror #22
 274:	c9c9694b 	stmibgt	r9, {r0, r1, r3, r6, r8, fp, sp, lr}^
 278:	a04baf91 	umaalge	sl, fp, r1, pc	; <UNPREDICTABLE>
 27c:	ac450393 	mcrrge	3, 9, r0, r5, cr3
 280:	77203c03 	strvc	r3, [r0, -r3, lsl #24]!
 284:	4c3d3d67 	ldcmi	13, cr3, [sp], #-412	; 0xfffffe64
 288:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 28c:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 290:	c7080304 	strgt	r0, [r8, -r4, lsl #6]
 294:	01040200 	mrseq	r0, R12_usr
 298:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 29c:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 2a0:	003d0304 	eorseq	r0, sp, r4, lsl #6
 2a4:	08030402 	stmdaeq	r3, {r1, sl}
 2a8:	040200c7 	streq	r0, [r2], #-199	; 0xffffff39
 2ac:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 2b0:	4b4b4d69 	blmi	12d385c <startup-0x1ed2c7a4>
 2b4:	02007675 	andeq	r7, r0, #122683392	; 0x7500000
 2b8:	4a060104 	bmi	1806d0 <startup-0x1fe7f930>
 2bc:	005b8306 	subseq	r8, fp, r6, lsl #6
 2c0:	06010402 	streq	r0, [r1], -r2, lsl #8
 2c4:	5a83064a 	bpl	fe0c1bf4 <ball_geometry+0xde0c13b8>
 2c8:	2f3d4e4b 	svccs	0x003d4e4b
 2cc:	4d4b4b34 	vstrmi	d20, [fp, #-208]	; 0xffffff30
 2d0:	03040200 	movweq	r0, #16896	; 0x4200
 2d4:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 2d8:	02007303 	andeq	r7, r0, #201326592	; 0xc000000
 2dc:	3c060104 	stfccs	f0, [r6], {4}
 2e0:	02004006 	andeq	r4, r0, #6
 2e4:	003d0304 	eorseq	r0, sp, r4, lsl #6
 2e8:	73030402 	movwvc	r0, #13314	; 0x3402
 2ec:	01040200 	mrseq	r0, R12_usr
 2f0:	40063c06 	andmi	r3, r6, r6, lsl #24
 2f4:	0402005a 	streq	r0, [r2], #-90	; 0xffffffa6
 2f8:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 2fc:	00730304 	rsbseq	r0, r3, r4, lsl #6
 300:	06010402 	streq	r0, [r1], -r2, lsl #8
 304:	0040063c 	subeq	r0, r0, ip, lsr r6
 308:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 30c:	03040200 	movweq	r0, #16896	; 0x4200
 310:	04020073 	streq	r0, [r2], #-115	; 0xffffff8d
 314:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 318:	00040240 	andeq	r0, r4, r0, asr #4
 31c:	Address 0x0000031c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6f73645f 	svcvs	0x0073645f
   4:	6e61685f 	mcrvs	8, 3, r6, cr1, cr15, {2}
   8:	00656c64 	rsbeq	r6, r5, r4, ror #24
   c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff5d1 <ball_geometry+0xdfffed95>
  10:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  14:	6965682f 	stmdbvs	r5!, {r0, r1, r2, r3, r5, fp, sp, lr}^
  18:	442f6c6e 	strtmi	r6, [pc], #-3182	; 20 <startup-0x1fffffe0>
  1c:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
  20:	73746e65 	cmnvc	r4, #1616	; 0x650
  24:	706f4d2f 	rsbvc	r4, pc, pc, lsr #26
  28:	6f62616c 	svcvs	0x0062616c
  2c:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
  30:	72656e6f 	rsbvc	r6, r5, #1776	; 0x6f0
  34:	6172672f 	cmnvs	r2, pc, lsr #14
  38:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  3c:	70736964 	rsbsvc	r6, r3, r4, ror #18
  40:	2f79616c 	svccs	0x0079616c
  44:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  48:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  4c:	70730063 	rsbsvc	r0, r3, r3, rrx
  50:	59646565 	stmdbpl	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
  54:	61726700 	cmnvs	r2, r0, lsl #14
  58:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  5c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  60:	74006574 	strvc	r6, [r0], #-1396	; 0xfffffa8c
  64:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; ffffff50 <ball_geometry+0xdffff714>
  68:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  6c:	61725f00 	cmnvs	r2, r0, lsl #30
  70:	3834646e 	ldmdacc	r4!, {r1, r2, r3, r5, r6, sl, sp, lr}
  74:	6d655f00 	stclvs	15, cr5, [r5, #-0]
  78:	65677265 	strbvs	r7, [r7, #-613]!	; 0xfffffd9b
  7c:	0079636e 	rsbseq	r6, r9, lr, ror #6
  80:	616c6564 	cmnvs	ip, r4, ror #10
  84:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
  88:	00736e30 	rsbseq	r6, r3, r0, lsr lr
  8c:	69755f5f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, fp, ip, lr}^
  90:	5f38746e 	svcpl	0x0038746e
  94:	72670074 	rsbvc	r0, r7, #116	; 0x74
  98:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  9c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
  a0:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
  a4:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
  a8:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  ac:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
  b0:	6f5f7261 	svcvs	0x005f7261
  b4:	63656a62 	cmnvs	r5, #401408	; 0x62000
  b8:	775f0074 			; <UNDEFINED> instruction: 0x775f0074
  bc:	6f747263 	svcvs	0x00747263
  c0:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
  c4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
  c8:	63775f00 	cmnvs	r7, #0, 30
  cc:	6f747273 	svcvs	0x00747273
  d0:	5f73626d 	svcpl	0x0073626d
  d4:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
  d8:	6f6c0065 	svcvs	0x006c0065
  dc:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
  e0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
  e4:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
  e8:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
  ec:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  f0:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
  f4:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
  f8:	5f006465 	svcpl	0x00006465
  fc:	7366626c 	cmnvc	r6, #108, 4	; 0xc0000006
 100:	00657a69 	rsbeq	r7, r5, r9, ror #20
 104:	6f6c5f5f 	svcvs	0x006c5f5f
 108:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 10c:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 110:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 114:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 118:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 11c:	7a696c61 	bvc	1a5b2a8 <startup-0x1e5a4d58>
 120:	6d5f0065 	ldclvs	0, cr0, [pc, #-404]	; ffffff94 <ball_geometry+0xdffff758>
 124:	6f747262 	svcvs	0x00747262
 128:	735f6377 	cmpvc	pc, #-603979775	; 0xdc000001
 12c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 130:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 134:	5f5f0065 	svcpl	0x005f0065
 138:	735f6d74 	cmpvc	pc, #116, 26	; 0x1d00
 13c:	6c006365 	stcvs	3, cr6, [r0], {101}	; 0x65
 140:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 144:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 148:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 14c:	62755f00 	rsbsvs	r5, r5, #0, 30
 150:	5f006675 	svcpl	0x00006675
 154:	65736162 	ldrbvs	r6, [r3, #-354]!	; 0xfffffe9e
 158:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 160 <startup-0x1ffffea0>
 15c:	6f685f6d 	svcvs	0x00685f6d
 160:	5f007275 	svcpl	0x00007275
 164:	0066735f 	rsbeq	r7, r6, pc, asr r3
 168:	5f6e6f5f 	svcpl	0x006e6f5f
 16c:	74697865 	strbtvc	r7, [r9], #-2149	; 0xfffff79b
 170:	6772615f 			; <UNDEFINED> instruction: 0x6772615f
 174:	635f0073 	cmpvs	pc, #115	; 0x73
 178:	696b6f6f 	stmdbvs	fp!, {r0, r1, r2, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
 17c:	5f5f0065 	svcpl	0x005f0065
 180:	756c6773 	strbvc	r6, [ip, #-1907]!	; 0xfffff88d
 184:	65740065 	ldrbvs	r0, [r4, #-101]!	; 0xffffff9b
 188:	7300706d 	movwvc	r7, #109	; 0x6d
 18c:	63656c65 	cmnvs	r5, #25856	; 0x6500
 190:	6f635f74 	svcvs	0x00635f74
 194:	6f72746e 	svcvs	0x0072746e
 198:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 19c:	6c665f00 	stclvs	15, cr5, [r6], #-0
 1a0:	00736761 	rsbseq	r6, r3, r1, ror #14
 1a4:	5f73695f 	svcpl	0x0073695f
 1a8:	00617863 	rsbeq	r7, r1, r3, ror #16
 1ac:	7364775f 	cmnvc	r4, #24903680	; 0x17c0000
 1b0:	6c625f00 	stclvs	15, cr5, [r2], #-0
 1b4:	7a69736b 	bvc	1a5cf68 <startup-0x1e5a3098>
 1b8:	6f6d0065 	svcvs	0x006d0065
 1bc:	6f5f6576 	svcvs	0x005f6576
 1c0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 1c4:	635f0074 	cmpvs	pc, #116	; 0x74
 1c8:	75627476 	strbvc	r7, [r2, #-1142]!	; 0xfffffb8a
 1cc:	6f5f0066 	svcvs	0x005f0066
 1d0:	65736666 	ldrbvs	r6, [r3, #-1638]!	; 0xfffff99a
 1d4:	6d5f0074 	ldclvs	0, cr0, [pc, #-464]	; c <startup-0x1ffffff4>
 1d8:	74727362 	ldrbtvc	r7, [r2], #-866	; 0xfffffc9e
 1dc:	7363776f 	cmnvc	r3, #29097984	; 0x1bc0000
 1e0:	6174735f 	cmnvs	r4, pc, asr r3
 1e4:	50006574 	andpl	r6, r0, r4, ror r5
 1e8:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 1ec:	626d5f00 	rsbvs	r5, sp, #0, 30
 1f0:	6e656c72 	mcrvs	12, 3, r6, cr5, cr2, {3}
 1f4:	6174735f 	cmnvs	r4, pc, asr r3
 1f8:	5f006574 	svcpl	0x00006574
 1fc:	72616e66 	rsbvc	r6, r1, #1632	; 0x660
 200:	5f007367 	svcpl	0x00007367
 204:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 208:	6e665f00 	cdpvs	15, 6, cr5, cr6, cr0, {0}
 20c:	735f0073 	cmpvc	pc, #115	; 0x73
 210:	006e6769 	rsbeq	r6, lr, r9, ror #14
 214:	6f6c665f 	svcvs	0x006c665f
 218:	745f6b63 	ldrbvc	r6, [pc], #-2915	; 220 <startup-0x1ffffde0>
 21c:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 220:	72726564 	rsbsvc	r6, r2, #100, 10	; 0x19000000
 224:	69425f00 	stmdbvs	r2, {r8, r9, sl, fp, ip, lr}^
 228:	746e6967 	strbtvc	r6, [lr], #-2407	; 0xfffff699
 22c:	61675f00 	cmnvs	r7, r0, lsl #30
 230:	5f616d6d 	svcpl	0x00616d6d
 234:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 238:	006d6167 	rsbeq	r6, sp, r7, ror #2
 23c:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
 240:	5f746c75 	svcpl	0x00746c75
 244:	5f5f006b 	svcpl	0x005f006b
 248:	64006d74 	strvs	r6, [r0], #-3444	; 0xfffff28c
 24c:	5f776172 	svcpl	0x00776172
 250:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 254:	5f007463 	svcpl	0x00007463
 258:	6863775f 	stmdavs	r3!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 25c:	735f0062 	cmpvc	pc, #98	; 0x62
 260:	756f6474 	strbvc	r6, [pc, #-1140]!	; fffffdf4 <ball_geometry+0xdffff5b8>
 264:	70730074 	rsbsvc	r0, r3, r4, ror r0
 268:	58646565 	stmdapl	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 26c:	76635f00 	strbtvc	r5, [r3], -r0, lsl #30
 270:	6e656c74 	mcrvs	12, 3, r6, cr5, cr4, {3}
 274:	69665f00 	stmdbvs	r6!, {r8, r9, sl, fp, ip, lr}^
 278:	7300656c 	movwvc	r6, #1388	; 0x56c
 27c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 280:	5f007075 	svcpl	0x00007075
 284:	626f696e 	rsbvs	r6, pc, #1802240	; 0x1b8000
 288:	6f700073 	svcvs	0x00700073
 28c:	70005873 	andvc	r5, r0, r3, ror r8
 290:	0059736f 	subseq	r7, r9, pc, ror #6
 294:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 298:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 29c:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 2a0:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 2a4:	6700746e 	strvs	r7, [r0, -lr, ror #8]
 2a8:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2ac:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 2b0:	00646165 	rsbeq	r6, r4, r5, ror #2
 2b4:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
 2b8:	30746978 	rsbscc	r6, r4, r8, ror r9
 2bc:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 2c0:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 206 <startup-0x1ffffdfa>	; <UNPREDICTABLE>
 2c4:	6f726b69 	svcvs	0x00726b69
 2c8:	69735f00 	ldmdbvs	r3!, {r8, r9, sl, fp, ip, lr}^
 2cc:	6c616e67 	stclvs	14, cr6, [r1], #-412	; 0xfffffe64
 2d0:	6675625f 			; <UNDEFINED> instruction: 0x6675625f
 2d4:	73615f00 	cmnvc	r1, #0, 30
 2d8:	6d697463 	cfstrdvs	mvd7, [r9, #-396]!	; 0xfffffe74
 2dc:	75625f65 	strbvc	r5, [r2, #-3941]!	; 0xfffff09b
 2e0:	725f0066 	subsvc	r0, pc, #102	; 0x66
 2e4:	6c757365 	ldclvs	3, cr7, [r5], #-404	; 0xfffffe6c
 2e8:	5f5f0074 	svcpl	0x005f0074
 2ec:	00686377 	rsbeq	r6, r8, r7, ror r3
 2f0:	70617267 	rsbvc	r7, r1, r7, ror #4
 2f4:	5f636968 	svcpl	0x00636968
 2f8:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2fc:	61645f65 	cmnvs	r4, r5, ror #30
 300:	5f006174 	svcpl	0x00006174
 304:	4b434f4c 	blmi	10d403c <startup-0x1ef2bfc4>
 308:	7700545f 	smlsdvc	r0, pc, r4, r5	; <UNPREDICTABLE>
 30c:	5f746e69 	svcpl	0x00746e69
 310:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 314:	7367616c 	cmnvc	r7, #108, 2
 318:	5f5f0032 	svcpl	0x005f0032
 31c:	795f6d74 	ldmdbvc	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 320:	00726165 	rsbseq	r6, r2, r5, ror #2
 324:	506d756e 	rsbpl	r7, sp, lr, ror #10
 328:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 32c:	69700073 	ldmdbvs	r0!, {r0, r1, r4, r5, r6}^
 330:	006c6578 	rsbeq	r6, ip, r8, ror r5
 334:	20554e47 	subscs	r4, r5, r7, asr #28
 338:	20393943 	eorscs	r3, r9, r3, asr #18
 33c:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
 340:	30322031 	eorscc	r2, r2, r1, lsr r0
 344:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
 348:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
 34c:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 350:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 354:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 358:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
 35c:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 360:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
 364:	6172622d 	cmnvs	r2, sp, lsr #4
 368:	2068636e 	rsbcs	r6, r8, lr, ror #6
 36c:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 370:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 374:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 378:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
 37c:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 380:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 384:	616d2d20 	cmnvs	sp, r0, lsr #26
 388:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 38c:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 390:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 394:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 398:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 39c:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 3a0:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 3a4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 3a8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 3ac:	616d2d20 	cmnvs	sp, r0, lsr #26
 3b0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 3b4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 3b8:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 3bc:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 3c0:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 3c4:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 3c8:	00393963 	eorseq	r3, r9, r3, ror #18
 3cc:	4a424f50 	bmi	1094114 <startup-0x1ef6beec>
 3d0:	00544345 	subseq	r4, r4, r5, asr #6
 3d4:	78656e5f 	stmdavc	r5!, {r0, r1, r2, r3, r4, r6, r9, sl, fp, sp, lr}^
 3d8:	5f006674 	svcpl	0x00006674
 3dc:	5f6d745f 	svcpl	0x006d745f
 3e0:	006e6f6d 	rsbeq	r6, lr, sp, ror #30
 3e4:	6574615f 	ldrbvs	r6, [r4, #-351]!	; 0xfffffea1
 3e8:	00746978 	rsbseq	r6, r4, r8, ror r9
 3ec:	4f454750 	svcmi	0x00454750
 3f0:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
 3f4:	5f5f0059 	svcpl	0x005f0059
 3f8:	64696473 	strbtvs	r6, [r9], #-1139	; 0xfffffb8d
 3fc:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 400:	666f5f00 	strbtvs	r5, [pc], -r0, lsl #30
 404:	00745f66 	rsbseq	r5, r4, r6, ror #30
 408:	79665f78 	stmdbvc	r6!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 40c:	6b736973 	blvs	1cda9e0 <startup-0x1e325620>
 410:	72665f00 	rsbvc	r5, r6, #0, 30
 414:	696c6565 	stmdbvs	ip!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 418:	64007473 	strvs	r7, [r0], #-1139	; 0xfffffb8d
 41c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 420:	3030355f 	eorscc	r3, r0, pc, asr r5
 424:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
 428:	616d7469 	cmnvs	sp, r9, ror #8
 42c:	5f006b73 	svcpl	0x00006b73
 430:	6f746377 	svcvs	0x00746377
 434:	735f626d 	cmpvc	pc, #-805306362	; 0xd0000006
 438:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 43c:	736e7500 	cmnvc	lr, #0, 10
 440:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 444:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 448:	67007261 	strvs	r7, [r0, -r1, ror #4]
 44c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 450:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 454:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 458:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; 2e4 <startup-0x1ffffd1c>
 45c:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 460:	656e5f00 	strbvs	r5, [lr, #-3840]!	; 0xfffff100
 464:	69640077 	stmdbvs	r4!, {r0, r1, r2, r4, r5, r6}^
 468:	64005872 	strvs	r5, [r0], #-2162	; 0xfffff78e
 46c:	00597269 	subseq	r7, r9, r9, ror #4
 470:	70617267 	rsbvc	r7, r1, r7, ror #4
 474:	5f636968 	svcpl	0x00636968
 478:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 47c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 480:	685f0061 	ldmdavs	pc, {r0, r5, r6}^	; <UNPREDICTABLE>
 484:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 488:	73006f6e 	movwvc	r6, #3950	; 0xf6e
 48c:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 490:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 494:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 49c <startup-0x1ffffb64>
 498:	64795f6d 	ldrbtvs	r5, [r9], #-3949	; 0xfffff093
 49c:	5f007961 	svcpl	0x00007961
 4a0:	7562735f 	strbvc	r7, [r2, #-863]!	; 0xfffffca1
 4a4:	695f0066 	ldmdbvs	pc, {r1, r2, r5, r6}^	; <UNPREDICTABLE>
 4a8:	0073626f 	rsbseq	r6, r3, pc, ror #4
 4ac:	70617267 	rsbvc	r7, r1, r7, ror #4
 4b0:	5f636968 	svcpl	0x00636968
 4b4:	61656c63 	cmnvs	r5, r3, ror #24
 4b8:	63735f72 	cmnvs	r3, #456	; 0x1c8
 4bc:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 4c0:	465f5f00 	ldrbmi	r5, [pc], -r0, lsl #30
 4c4:	00454c49 	subeq	r4, r5, r9, asr #24
 4c8:	73626d5f 	cmnvc	r2, #6080	; 0x17c0
 4cc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 4d0:	5f00745f 	svcpl	0x0000745f
 4d4:	4946735f 	stmdbmi	r6, {r0, r1, r2, r3, r4, r6, r8, r9, ip, sp, lr}^
 4d8:	5f00454c 	svcpl	0x0000454c
 4dc:	7473626d 	ldrbtvc	r6, [r3], #-621	; 0xfffffd93
 4e0:	00657461 	rsbeq	r7, r5, r1, ror #8
 4e4:	6e61725f 	mcrvs	2, 3, r7, cr1, cr15, {2}
 4e8:	656e5f64 	strbvs	r5, [lr, #-3940]!	; 0xfffff09c
 4ec:	62007478 	andvs	r7, r0, #120, 8	; 0x78000000
 4f0:	5f6c6c61 	svcpl	0x006c6c61
 4f4:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 360 <startup-0x1ffffca0>
 4f8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 4fc:	626d5f00 	rsbvs	r5, sp, #0, 30
 500:	5f6e656c 	svcpl	0x006e656c
 504:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 508:	695f0065 	ldmdbvs	pc, {r0, r2, r5, r6}^	; <UNPREDICTABLE>
 50c:	5f00636e 	svcpl	0x0000636e
 510:	00646e69 	rsbeq	r6, r4, r9, ror #28
 514:	70617267 	rsbvc	r7, r1, r7, ror #4
 518:	5f636968 	svcpl	0x00636968
 51c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 520:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 524:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 528:	6f6c5f00 	svcvs	0x006c5f00
 52c:	656c6163 	strbvs	r6, [ip, #-355]!	; 0xfffffe9d
 530:	635f5f00 	cmpvs	pc, #0, 30
 534:	6e61656c 	cdpvs	5, 6, cr6, cr1, cr12, {3}
 538:	5f007075 	svcpl	0x00007075
 53c:	70736e75 	rsbsvc	r6, r3, r5, ror lr
 540:	66696365 	strbtvs	r6, [r9], -r5, ror #6
 544:	5f646569 	svcpl	0x00646569
 548:	61636f6c 	cmnvs	r3, ip, ror #30
 54c:	695f656c 	ldmdbvs	pc, {r2, r3, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
 550:	006f666e 	rsbeq	r6, pc, lr, ror #12
 554:	78616d5f 	stmdavc	r1!, {r0, r1, r2, r3, r4, r6, r8, sl, fp, sp, lr}^
 558:	00736477 	rsbseq	r6, r3, r7, ror r4
 55c:	6565725f 	strbvs	r7, [r5, #-607]!	; 0xfffffda1
 560:	5f00746e 	svcpl	0x0000746e
 564:	64656573 	strbtvs	r6, [r5], #-1395	; 0xfffffa8d
 568:	635f5f00 	cmpvs	pc, #0, 30
 56c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0xfffffa91
 570:	6c5f5f00 	mrrcvs	15, 0, r5, pc, cr0	; <UNPREDICTABLE>
 574:	006b636f 	rsbeq	r6, fp, pc, ror #6
 578:	61765f5f 	cmnvs	r6, pc, asr pc
 57c:	0065756c 	rsbeq	r7, r5, ip, ror #10
 580:	6565735f 	strbvs	r7, [r5, #-863]!	; 0xfffffca1
 584:	4f74006b 	svcmi	0x0074006b
 588:	63656a62 	cmnvs	r5, #401408	; 0x62000
 58c:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 590:	5f736f70 	svcpl	0x00736f70
 594:	5f5f0074 	svcpl	0x005f0074
 598:	6d5f6d74 	ldclvs	13, cr6, [pc, #-464]	; 3d0 <startup-0x1ffffc30>
 59c:	69006e69 	stmdbvs	r0, {r0, r3, r5, r6, r9, sl, fp, sp, lr}
 5a0:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
 5a4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 5a8:	70615f74 	rsbvc	r5, r1, r4, ror pc
 5ac:	65730070 	ldrbvs	r0, [r3, #-112]!	; 0xffffff90
 5b0:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 5b4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 5b8:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 5bc:	5f006465 	svcpl	0x00006465
 5c0:	746c756d 	strbtvc	r7, [ip], #-1389	; 0xfffffa93
 5c4:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 5c8:	6b6f7472 	blvs	1bdd798 <startup-0x1e422868>
 5cc:	73616c5f 	cmnvc	r1, #24320	; 0x5f00
 5d0:	665f0074 			; <UNDEFINED> instruction: 0x665f0074
 5d4:	7079746e 	rsbsvc	r7, r9, lr, ror #8
 5d8:	5f007365 	svcpl	0x00007365
 5dc:	00646461 	rsbeq	r6, r4, r1, ror #8
 5e0:	4c555f5f 	mrrcmi	15, 5, r5, r5, cr15	; <UNPREDICTABLE>
 5e4:	00676e6f 	rsbeq	r6, r7, pc, ror #28
 5e8:	7465675f 	strbtvc	r6, [r5], #-1887	; 0xfffff8a1
 5ec:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
 5f0:	7272655f 	rsbsvc	r6, r2, #398458880	; 0x17c00000
 5f4:	61726700 	cmnvs	r2, r0, lsl #14
 5f8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 5fc:	6961775f 	stmdbvs	r1!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 600:	65725f74 	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
 604:	00796461 	rsbseq	r6, r9, r1, ror #8
 608:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 60c:	6c675f00 	stclvs	15, cr5, [r7], #-0
 610:	6c61626f 	sfmvs	f6, 2, [r1], #-444	; 0xfffffe44
 614:	706d695f 	rsbvc	r6, sp, pc, asr r9
 618:	5f657275 	svcpl	0x00657275
 61c:	00727470 	rsbseq	r7, r2, r0, ror r4
 620:	756e755f 	strbvc	r7, [lr, #-1375]!	; 0xfffffaa1
 624:	5f646573 	svcpl	0x00646573
 628:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
 62c:	7a697300 	bvc	1a5d234 <startup-0x1e5a2dcc>
 630:	73005865 	movwvc	r5, #2149	; 0x865
 634:	59657a69 	stmdbpl	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 638:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 63c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 640:	65685c73 	strbvs	r5, [r8, #-3187]!	; 0xfffff38d
 644:	5c6c6e69 	stclpl	14, cr6, [ip], #-420	; 0xfffffe5c
 648:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 64c:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 650:	6f4d5c73 	svcvs	0x004d5c73
 654:	62616c70 	rsbvs	r6, r1, #112, 24	; 0x7000
 658:	7461726f 	strbtvc	r7, [r1], #-623	; 0xfffffd91
 65c:	656e6f69 	strbvs	r6, [lr, #-3945]!	; 0xfffff097
 660:	72675c72 	rsbvc	r5, r7, #29184	; 0x7200
 664:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 668:	73696463 	cmnvc	r9, #1660944384	; 0x63000000
 66c:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 670:	745f5f00 	ldrbvc	r5, [pc], #-3840	; 678 <startup-0x1ffff988>
 674:	64775f6d 	ldrbtvs	r5, [r7], #-3949	; 0xfffff093
 678:	5f007961 	svcpl	0x00007961
 67c:	65756c67 	ldrbvs	r6, [r5, #-3175]!	; 0xfffff399
 680:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
 684:	006e6964 	rsbeq	r6, lr, r4, ror #18
 688:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 68c:	5f00746e 	svcpl	0x0000746e
 690:	6c616d6e 	stclvs	13, cr6, [r1], #-440	; 0xfffffe48
 694:	00636f6c 	rsbeq	r6, r3, ip, ror #30
 698:	34366c5f 	ldrtcc	r6, [r6], #-3167	; 0xfffff3a1
 69c:	75625f61 	strbvc	r5, [r2, #-3937]!	; 0xfffff09f
 6a0:	735f0066 	cmpvc	pc, #102	; 0x66
 6a4:	665f6769 	ldrbvs	r6, [pc], -r9, ror #14
 6a8:	00636e75 	rsbeq	r6, r3, r5, ror lr
 6ac:	75626e5f 	strbvc	r6, [r2, #-3679]!	; 0xfffff1a1
 6b0:	755f0066 	ldrbvc	r0, [pc, #-102]	; 652 <startup-0x1ffff9ae>
 6b4:	6573756e 	ldrbvs	r7, [r3, #-1390]!	; 0xfffffa92
 6b8:	5f5f0064 	svcpl	0x005f0064
 6bc:	695f6d74 	ldmdbvs	pc, {r2, r4, r5, r6, r8, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 6c0:	74736473 	ldrbtvc	r6, [r3], #-1139	; 0xfffffb8d
 6c4:	6f6c5f00 	svcvs	0x006c5f00
 6c8:	746c6163 	strbtvc	r6, [ip], #-355	; 0xfffffe9d
 6cc:	5f656d69 	svcpl	0x00656d69
 6d0:	00667562 	rsbeq	r7, r6, r2, ror #10
 6d4:	6f6c635f 	svcvs	0x006c635f
 6d8:	5f006573 	svcpl	0x00006573
 6dc:	00383472 	eorseq	r3, r8, r2, ror r4
 6e0:	74626d5f 	strbtvc	r6, [r2], #-3423	; 0xfffff2a1
 6e4:	5f63776f 	svcpl	0x0063776f
 6e8:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 6ec:	705f0065 	subsvc	r0, pc, r5, rrx
 6f0:	6d007335 	stcvs	3, cr7, [r0, #-212]	; 0xffffff2c
 6f4:	006e6961 	rsbeq	r6, lr, r1, ror #18
 6f8:	616c6564 	cmnvs	ip, r4, ror #10
 6fc:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 700:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 704:	6d745f5f 	ldclvs	15, cr5, [r4, #-380]!	; 0xfffffe84
 708:	61646d5f 	cmnvs	r4, pc, asr sp
 70c:	Address 0x0000070c is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball_geometry+0xdfffead2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	0000000a 	andeq	r0, r0, sl
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	00000018 	andeq	r0, r0, r8, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	2000001a 	andcs	r0, r0, sl, lsl r0
  48:	00000012 	andeq	r0, r0, r2, lsl r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  58:	0000001c 	andeq	r0, r0, ip, lsl r0
  5c:	00000000 	andeq	r0, r0, r0
  60:	2000002c 	andcs	r0, r0, ip, lsr #32
  64:	0000003a 	andeq	r0, r0, sl, lsr r0
  68:	40080e41 	andmi	r0, r8, r1, asr #28
  6c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  70:	180e4101 	stmdane	lr, {r0, r8, lr}
  74:	00070d41 	andeq	r0, r7, r1, asr #26
  78:	0000001c 	andeq	r0, r0, ip, lsl r0
  7c:	00000000 	andeq	r0, r0, r0
  80:	20000066 	andcs	r0, r0, r6, rrx
  84:	00000028 	andeq	r0, r0, r8, lsr #32
  88:	40080e41 	andmi	r0, r8, r1, asr #28
  8c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  90:	180e4101 	stmdane	lr, {r0, r8, lr}
  94:	00070d41 	andeq	r0, r7, r1, asr #26
  98:	0000001c 	andeq	r0, r0, ip, lsl r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	2000008e 	andcs	r0, r0, lr, lsl #1
  a4:	00000036 	andeq	r0, r0, r6, lsr r0
  a8:	40080e41 	andmi	r0, r8, r1, asr #28
  ac:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b0:	100e4101 	andne	r4, lr, r1, lsl #2
  b4:	00070d41 	andeq	r0, r7, r1, asr #26
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	200000c4 	andcs	r0, r0, r4, asr #1
  c4:	00000034 	andeq	r0, r0, r4, lsr r0
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	200000f8 	strdcs	r0, [r0], -r8
  e4:	0000005e 	andeq	r0, r0, lr, asr r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	100e4101 	andne	r4, lr, r1, lsl #2
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	00000018 	andeq	r0, r0, r8, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000156 	andcs	r0, r0, r6, asr r1
 104:	00000066 	andeq	r0, r0, r6, rrx
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	200001bc 			; <UNDEFINED> instruction: 0x200001bc
 120:	00000098 	muleq	r0, r8, r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	180e4101 	stmdane	lr, {r0, r8, lr}
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	20000254 	andcs	r0, r0, r4, asr r2
 140:	00000080 	andeq	r0, r0, r0, lsl #1
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	100e4101 	andne	r4, lr, r1, lsl #2
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	200002d4 	ldrdcs	r0, [r0], -r4
 160:	00000046 	andeq	r0, r0, r6, asr #32
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	2000031a 	andcs	r0, r0, sl, lsl r3
 180:	00000046 	andeq	r0, r0, r6, asr #32
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	100e4101 	andne	r4, lr, r1, lsl #2
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	20000360 	andcs	r0, r0, r0, ror #6
 1a0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	100e4101 	andne	r4, lr, r1, lsl #2
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	00000018 	andeq	r0, r0, r8, lsl r0
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	2000038a 	andcs	r0, r0, sl, lsl #7
 1c0:	0000001a 	andeq	r0, r0, sl, lsl r0
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	200003a4 	andcs	r0, r0, r4, lsr #7
 1dc:	00000050 	andeq	r0, r0, r0, asr r0
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	200003f4 	strdcs	r0, [r0], -r4
 1f8:	00000058 	andeq	r0, r0, r8, asr r0
 1fc:	40080e41 	andmi	r0, r8, r1, asr #28
 200:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 204:	100e4101 	andne	r4, lr, r1, lsl #2
 208:	00070d41 	andeq	r0, r7, r1, asr #26
 20c:	00000024 	andeq	r0, r0, r4, lsr #32
 210:	00000000 	andeq	r0, r0, r0
 214:	2000044c 	andcs	r0, r0, ip, asr #8
 218:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 21c:	40140e41 	andsmi	r0, r4, r1, asr #28
 220:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 224:	03864004 	orreq	r4, r6, #4
 228:	40028740 	andmi	r8, r2, r0, asr #14
 22c:	0e41018e 	dvfeqd	f0, f1, #0.5
 230:	070d4128 	streq	r4, [sp, -r8, lsr #2]
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000000 	andeq	r0, r0, r0
 23c:	2000061c 	andcs	r0, r0, ip, lsl r6
 240:	00000020 	andeq	r0, r0, r0, lsr #32
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	180e4101 	stmdane	lr, {r0, r8, lr}
 250:	00070d41 	andeq	r0, r7, r1, asr #26
 254:	0000001c 	andeq	r0, r0, ip, lsl r0
 258:	00000000 	andeq	r0, r0, r0
 25c:	2000063c 	andcs	r0, r0, ip, lsr r6
 260:	00000064 	andeq	r0, r0, r4, rrx
 264:	40080e41 	andmi	r0, r8, r1, asr #28
 268:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 26c:	180e4101 	stmdane	lr, {r0, r8, lr}
 270:	00070d41 	andeq	r0, r7, r1, asr #26
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	00000000 	andeq	r0, r0, r0
 27c:	200006a0 	andcs	r0, r0, r0, lsr #13
 280:	00000064 	andeq	r0, r0, r4, rrx
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	180e4101 	stmdane	lr, {r0, r8, lr}
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000000 	andeq	r0, r0, r0
 29c:	20000704 	andcs	r0, r0, r4, lsl #14
 2a0:	00000080 	andeq	r0, r0, r0, lsl #1
 2a4:	40080e41 	andmi	r0, r8, r1, asr #28
 2a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ac:	100e4101 	andne	r4, lr, r1, lsl #2
 2b0:	00070d41 	andeq	r0, r7, r1, asr #26
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	20000784 	andcs	r0, r0, r4, lsl #15
 2c0:	000000b8 	strheq	r0, [r0], -r8
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
